<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
	<head>
		<title>ActivitiesGuideSugar (en)</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<!--
		<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="WebRss.html" />
		-->
		<link rel="icon" href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" /> <link rel="shortcut icon" href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" />
		<link rel=StyleSheet href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/typography.css" type="text/css" media="screen">
<style>
#index {
	 color:  #ff7f00;
	 font-family: trebuchet,sans-serif;
	 font-size: 10px;
	 line-height:11px;
}
#index UL {
	 width: 159px;
	 list-style-type: None;
	 padding-left: 0px;
	 border: 14px solid #ff7f00;
	 background-color: #ff7f00;
	 margin: 0px 0px 0px 0px;
  }
#index  LI {
	 padding-left: 0px;
	 padding-right: 10px;
	 padding-top: 4px;
	 padding-bottom: 4px;
	 color: #ffffff;
	 margin: 0px 0px 0px 0px;
	 background-color: #ff7f00;
	 border-top: 1px solid #ff7f00;
  }
#index LI:hover {
  background-color: #F99B1C;
}
#index  LI.heading {
	 background-color: #ff7f00;
	 color: #000000;
	 border-top:1px solid #FFE5CC;
	 padding-top: 7px;
	 font-weight: bold;
}
#index  LI.title {
	 border-bottom: 2px solid #FFE5CC;
	 background-color: #ff7f00;
	 color: #FBF4E9;
	 font-weight: bolder;
	 font-size:10px;
	 line-height:18px;
	 padding-bottom: 40px;
  }
#index A {
	 text-decoration: none;
	 color:  #FBF4E9;
	 font-weight: bold;
}
#ds-layout .imgcontainer {
	position:relative;
	}
#ds-layout .caption {
	position:relative;
	bottom:1;
	left:0;
	text-align:center;
	background:#ffe7cb;
	width:100%;
	opacity:.75;
	filter:alpha(opacity=85);
	color:#000;
	font-style: italic;
	 	font-size: 9px;
	line-height:11px;
	}
</style>
<script type="text/javascript">
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
	 window.onload = func;
  } else {
	 window.onload = function() {
		oldonload();
		func();
	 }
  }
}

function insertAfter(newElement,targetElement) {
  var parent = targetElement.parentNode;
  if (parent.lastChild == targetElement) {
	 parent.appendChild(newElement);
  } else {
	 parent.insertBefore(newElement,targetElement.nextSibling);
  }
}

function captionizeImages() {
  if (!document.getElementsByTagName) return false;
  if (!document.createElement) return false;
  var images = document.getElementsByTagName("img");
  if (images.length < 1) return false; 
  for (var i=0; i<images.length; i++) {
	 if (images[i].className != "non") {
		var title = images[i].getAttribute("title");
		var width = images[i].width;
		var divCaption = document.createElement("div");
		divCaption.className="caption";
		divCaption.style.width=width+'px';
		if (title) divCaption.style.padding='2px 0px 3px 0px';
		divCaption.style.display='block';
		var divCaption_text = document.createTextNode(title);
		divCaption.appendChild(divCaption_text);
		var divContainer = document.createElement("div");
		divContainer.className="imgcontainer";
		if (title) divContainer.style.padding='0px 0px 10px 0px';
		images[i].parentNode.insertBefore(divContainer,images[i]);
		divContainer.appendChild(images[i]);
		insertAfter(divCaption,images[i]);
	 }
  }
}
//addLoadEvent(captionizeImages);

function next () {
var onode, otarget;
onode=document.getElementById("UsingVersionControl");
if (onode.id=="Credits") die;
//alert (onode.id);
onode=onode.nextSibling;
if (onode.id=="heading") onode=onode.nextSibling;
while (onode) {
	 //onode=onode.nextSibling;
	 if (onode.nodeType==1) {
	//alert (onode.id);
		  otarget=onode;
		  break;
	 }
	 onode=onode.nextSibling;
}
if (otarget) {
	 //you actually have found one, and do something here
	 //alert(otarget.id + "\n" + otarget.tagName);    //just to verify
	 top.location = "/ActivitiesGuideSugar/" + otarget.id;
} else {
	 //you don't find one
//alert("nada" + otarget.id);
}
}

function previous () {
var onode, otarget;
onode=document.getElementById("UsingVersionControl");
if (onode.id=="Introduction") die;
//alert (onode.id);
onode=onode.previousSibling;
if (onode.id=="heading") onode=onode.previousSibling;
if (onode.id=="title") die;
while (onode) {
	 //onode=onode.previousSibling;
	 if (onode.nodeType==1) {
	//alert (onode.id);
		  otarget=onode;
		  break;
	 }
	 onode=onode.previousSibling;
}
if (otarget) {
	 //you actually have found one, and do something here
	 //alert(otarget.id + "\n" + otarget.tagName);    //just to verify
	 top.location =  otarget.id;
} else {
	 //you don't find one
//alert("nada" + otarget.id);
}
}

</script>
	</head>
	<body  background="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/background.gif" style="margin:0;color:#000000;">
<div id="home" style="position:absolute;left:0px;top:10px;">
<a href="/"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/top_read_back.gif" border="0"></a>
</div>
<div id="index" style="position:absolute;left:0px;top:150px;">
<ul>
<li class="title">MAKING SUGAR ACTIVITIES</li><li id="Introduction"><a href="/ActivitiesGuideSugar/Introduction">INTRODUCTION</a></li><li id="WhatIsSugar"><a href="/ActivitiesGuideSugar/WhatIsSugar">WHAT IS SUGAR?</a></li><li id="WhatisanActivity"><a href="/ActivitiesGuideSugar/WhatisanActivity">WHAT IS A SUGAR ACTIVITY?</a></li><li id="NeedtoKnowWriteSugarActivity"><a href="/ActivitiesGuideSugar/NeedtoKnowWriteSugarActivity">WHAT DO I NEED TO KNOW TO WRITE A SUGAR ACTIVITY?</a></li><li id="SetUpDevEnvironment"><a href="/ActivitiesGuideSugar/SetUpDevEnvironment">SETTING UP A DEVELOPMENT ENVIRONMENT</a></li><li id="CreateFirstActivity"><a href="/ActivitiesGuideSugar/CreateFirstActivity">CREATING YOUR FIRST ACTIVITY</a></li><li id="StandalonePythonReadEtexts"><a href="/ActivitiesGuideSugar/StandalonePythonReadEtexts">MAKING A STANDALONE PYTHON PROGRAM</a></li><li id="InheritFromActivity"><a href="/ActivitiesGuideSugar/InheritFromActivity">INHERIT FROM SUGAR.ACTIVITY.ACTIVITY</a></li><li id="PackageTheActivity"><a href="/ActivitiesGuideSugar/PackageTheActivity">PACKAGE THE ACTIVITY</a></li><li id="AddRefinements"><a href="/ActivitiesGuideSugar/AddRefinements">ADD REFINEMENTS</a></li><li id="UsingVersionControl"><a href="/ActivitiesGuideSugar/UsingVersionControl">ADD YOUR ACTIVITY CODE TO VERSION CONTROL</a></li><li id="Credits"><a href="/ActivitiesGuideSugar/Credits">CREDITS</a></li></ul>
</div>
<div id="pdf" style="position:absolute;left:13px;top:190px;">
<a href="/ActivitiesGuideSugar/FM_06Jan10.pdf"><img class ="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/makepdf.gif" border=0></a>
<!-- <a href="/ActivitiesGuideSugar/FM_ActivitiesGuideSugar_06Jan10.pdf"><img class ="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/makepdf.gif" border=0></a> -->
<a href="/ActivitiesGuideSugar/print"><img class="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/viewprint.gif" border=0></a>
</div>
		<div style="position:absolute;left:240px;top:11px;">
		<table id="ds-layout" cellpadding="0" cellspacing="0" sumtop:5px;mary="" style="table-layout:fixed;width:670px;border: 5px solid #666666;padding-right: 0px;padding-left: 0px;padding-bottom: 0px;padding-top: 0px;margin-left : 10px;margin-top:10;background:#FFF7F0;">
			<tr>
			<td width=100%>
<div class="arrow" style="position:relative;left:10px;top:5px;width:50px;float:left;"><a href="#" onClick="previous();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/lefttext.png" height=20></a></div>
<div class="arrow" style="position:relative;left:528px;width:50px;top:5px;float:left;"><a href="#" onClick="next();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/righttext.png" height=20></a></div>
			<div class="ds-contentcontainer">
			<div style="margin-left:1.2em;float:right">
			<br>
			<div class="huh" style='decoration:none;color:black;border:1;position:absolute;top:60px;left:502px;'>
			<a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar/UsingVersionControl' onClick="alert('You will now be forwarded to the FLOSS Manuals editing interface')"><b><font color=#ff7f00><small>Edit this page</small></font></b></a> :: <a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar/FMComments?skin=floss2'><b><font color=#ff7f00><small>Discussion</small></font></b></a>
			</div>
			<h1>Putting Your Activity Code In Version Control
</h1>
<h2>What Is Version Control?
</h2>
<p> <em>"If I have seen further it is only by standing on the shoulders of giants."</em>
</p>
<p>Isaac Newton, in a letter to Robert Hooke.
</p>
<p>Writing an Activity is usually not something you do by yourself.&nbsp; You will usually have collaborators in one form or another.&nbsp; When I started writing <strong>Read Etexts</strong> I copied much of the code from the <strong>Read</strong> Activity.&nbsp; When I implemented text to speech I adapted a toolbar from the <strong>Speak</strong> Activity.&nbsp; When I finally got my copied file sharing code working the author of <strong>Image Viewer</strong> thought it was good enough to copy into that Activity.&nbsp; Another programmer saw the work I did for text to speech and thought he could do it better.&nbsp; He was right, and his improvements got merged into my own code.&nbsp; When I wrote <strong>Get Internet Archive Books</strong> someone else took the user interface I came up with and made a more powerful and versatile Activity called <strong>Get Books</strong>.&nbsp; Like Newton, everyone benefits from the work others have done before.
  <br />
</p>
<p>Even if I wanted to write Activities without help I would still need collaborators to translate them into other languages.
</p>
<p>To make collaboration possible you need to have a place where everyone can post their code and share it.&nbsp; This is called a code repository.&nbsp; It isn't enough to just share the latest version of your code.&nbsp; What you really want to do is share <em>every</em> version of your code.&nbsp; Every time you make a significant change to your code you want to have the new version and the previous version available.&nbsp; Not only do you want to have every version of your code available, you want to be able to compare any two versions your code to see what changed between them.&nbsp; This is what version control software does.
</p>
<p>The three most popular version control tools are <em>CVS</em>, <em>Subversion</em>, and <em>Git</em>.&nbsp; Git is the newest and is the one used by Sugar Labs.&nbsp; While not every Activity has its code into the Sugar Labs Git repository (other free code repositories exist) there is no good reason not to do it and significant benefits if you do.&nbsp; If you want to get your Activity translated into other languages using a Sugar Labs Git repository is a must. &nbsp;
  <br />
</p>
<h2>Git Along Little Dogies
</h2>
<p>Git is a <em>distributed</em> version control system.&nbsp; This means that not only are there copies of every version of your code in a central repository, the same copies exist on every user's computer.&nbsp; This means you can update your local repository while you are not connected to the Internet, then connect and share everything at one time.
</p>
<p> There are two ways you will interact with your Git repository: through Git commands and through the website at <a href="http://git.sugarlabs.org/.">http://git.sugarlabs.org/.</a>&nbsp;&nbsp; We'll look at this website first.
</p>
<p>Go to <a href="http://git.sugarlabs.org">http://git.sugarlabs.org/</a>&nbsp; and click on the <strong>Projects</strong> link in the upper right corner:
</p>
<p><img alt="git1.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git1.jpg" height="194" width="473" />
</p>
<p>You will see a list of projects in the repository.&nbsp; They will be listed from newest to oldest.&nbsp; You'll also see a <strong>New Project</strong> link but you'll need to create an account to use that and we aren't ready to do that yet.
  <br />
</p>
<p><img alt="git2.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git2.jpg" height="453" width="535" />
</p>
<p>If you use the <strong>Search</strong> link in the upper right corner of the page you'll get a search form.&nbsp; Use it to search for "read etexts".&nbsp; Click on the link for that project when you find it.&nbsp; You should see something like this:
  <br />
</p>
<p><img alt="git3.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git3.jpg" height="571" width="571" />
</p>
<p>This page lists <em>some</em> of the activity for the project but I don't find it particularly useful.&nbsp; To get a much better look at your project start by clicking on the repository name on the right side of the page.&nbsp; In this case the repository is named <strong>mainline</strong>.
</p>
<p><img alt="git4.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git4.jpg" height="236" width="399" />
</p>
<p>You'll see something like this at the top of the page:
</p>
<p><img alt="git5.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git5.jpg" height="509" width="574" />
</p>
<p>This page has some useful information on it.&nbsp; First, have a look at the <strong>Public clone url</strong> and the <strong>HTTP clone url</strong>.&nbsp; You need to click on <strong>More info...</strong> to see either one.&nbsp; If you run either of these commands from the console you will get a copy of the git repository for the project copied to your computer.&nbsp; This copy will include every version of every piece of code in the project.&nbsp; You would need to modify it a bit before you could share your changes back to the main repository, but everything would be there.
</p>
<p>The list under <strong>Activities</strong> is not that useful, but if you click on the <strong>Source Tree</strong> link you'll see something really good:
</p>
<p><img alt="git6.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git6.jpg" height="468" width="571" />
</p>
<p>Here is a list of every file in the project, the date it was last updated, and a comment on what was modified.&nbsp; Click on the link for <strong>ReadEtextsActivity.py</strong> and you'll see this:
</p>
<p><img alt="git7.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git7.jpg" height="642" width="597" />
</p>
<p>This is the latest code in that file in pretty print format.&nbsp; Python keywords are shown in a different color, there are line numbers, etc.&nbsp; This is a good page for looking at code on the screen, but it doesn't print well and it's not much good for copying snippets of code into Eric windows either.&nbsp; For either of those things you'll want to click on <strong>raw blob data</strong> at the top of the listing:
</p>
<p><img alt="git8.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git8.jpg" height="484" width="549" />
</p>
<p>We're not done yet.&nbsp; Use the <strong>Back</strong> button to get back to the pretty print listing and click on the <strong>Commits</strong> link.&nbsp; This will give us a list of everything that changed each time we committed code into Git:
</p>
<p><img alt="git9.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git9.jpg" height="540" width="636" />
</p>
<p>You may have noticed the odd combination of letters and numbers after the words <strong>James Simmons committed</strong>.&nbsp; This is a kind of version number.&nbsp; The usual practice with version control systems is to give each version of code you check in a version number, usually a simple sequence number.&nbsp; Git is distributed, with many separate copies of the repository being modified independently and then merged.&nbsp; That makes using just a sequential number to identify versions unworkable.&nbsp; Instead, Git gives each version a really, really large random number.&nbsp; The number is expressed in base 16, which uses the symbols 0-9 and a-f.&nbsp; What you see in green is only a small part of the complete number.&nbsp; The number is a link, and if you click on it you'll see this:
</p>
<p><img alt="git10.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git10.jpg" height="607" width="561" />
</p>
<p>At the top of the page we see the complete version number used for this commit.&nbsp; Below the gray box we see the full comment that was used to commit the changes.&nbsp; Below that is a listing of what files were changed.&nbsp;&nbsp; If we look further down the page we see this:
</p>
<p><img alt="git11_1.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git11_1.jpg" height="530" width="581" />
</p>
<p>This is a <em>diff</em> report which shows the lines that have changed between this version and the previous version.&nbsp; For each change it shows a few lines before and after the change to give you a better idea of what the change does.&nbsp; Every change shows line numbers too.
</p>
<p>A report like this is a wonderful aid to programming.&nbsp; Sometimes when you're working on an enhancement to your program something that had been working mysteriously stops working.&nbsp; When that happens you will wonder just what you changed that could have caused the problem.&nbsp; A diff report can help you find the source of the problem.
</p>
<p>By now you must be convinced that you want your project code in Git.&nbsp; Before we can do that we need to create an account on this website.&nbsp; That is no more difficult than creating an account on any other website, but it will need an important piece of information from us that we don't have yet.&nbsp; Getting that information is our next task.
</p>
<h2>Setting Up SSH Keys
</h2>
<p>To send your code to the gitorious code repository you need an SSH public/private key pair.&nbsp; SSH is a way of sending data over the network in encrypted format.&nbsp; (In other words, it uses a secret code so nobody but the person getting the data can read it).&nbsp; Public/private key encryption is a way of encrypting data that provides a way to guarantee that the person who is sending you the data is who he claims to be.
</p>
<p>In simple terms it works like this: the SSH software generates two very large numbers that are used to encode and decode the data going over the network.&nbsp; The first number, called the <em>private key</em>, is kept secret and is only used by you to encode the data.&nbsp; The second number, called the <em>public key</em>, is given to anyone who needs to decode your data.&nbsp; He can decode it using the public key; there is no need for him to know the private key.&nbsp; He can also use the public key to encode a message to send back to you and you can decode it using your private key.
</p>
<p>Git uses SSH like an electronic signature to verify that code changes that are supposed to be coming from you actually are coming from you.&nbsp; The Git repository is given your public key.&nbsp; It knows that anything it decodes with that key must have been sent by you because only you have the private key needed to encode it.
</p>
<p> We will be using a tool called <strong>OpenSSH</strong> to generate the public and private keys.&nbsp; This is included with every version of Linux so you just need to verify that it has been installed.&nbsp; Then use the <strong>ssh-keygen</strong> utility that comes with OpenSSH to generate the keys:
  <br />
</p>
<pre>[jim@olpc2 ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/jim/.ssh/id_rsa): </pre>
<p>By default ssh-keygen generates an <strong>RSA</strong> key, which is the kind we want.&nbsp; By default it puts the keyfiles in a directory called <strong>/<em>yourhome</em>/.ssh</strong> and we want that too, so DO NOT enter a filename when it asks you to.&nbsp; Just hit the <strong>Enter</strong> key to continue.
</p>
<pre>[jim@olpc2 ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/jim/.ssh/id_rsa):
Created directory '/home/jim/.ssh'.
Enter passphrase (empty for no passphrase):
</pre>
<p>Now we DO want a passphrase here.&nbsp; A passphrase is like a password that is used with the public and private keys to do the encrypting.&nbsp; When you type it in you will not be able to see what you typed.&nbsp; Because of that it will ask you to type the same thing again, and it will check to see that you typed them in the same way both times.
</p>
<pre>[jim@olpc2 ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/jim/.ssh/id_rsa):
Created directory '/home/jim/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/jim/.ssh/id_rsa.
Your public key has been saved in /home/jim/.ssh/id_rsa.pub.
The key fingerprint is:
d0:fe:c0:0c:1e:72:56:7a:19:cd:f3:85:c7:4c:9e:18 jim@olpc2.simmons
The key's randomart image is:
+--[ RSA 2048]----+
|        oo  E=.  |
|       + o+ .+=. |
|    . B +  o.oo  |
|     = O    .    |
|      . S        |
|         o       |
|          .      |
|                 |
|                 |
+-----------------+
</pre>
<p> When choosing a passphrase remember that it needs to be something you can type reliably without seeing it and it would be better if it was <em>not</em> a word you can find in the dictionary, because those are easily broken. When I need to make a password I use the tool at <a href="http://www.multicians.org/thvv/gpw.html.">http://www.multicians.org/thvv/gpw.html.</a>&nbsp; This tool generates a bunch of nonsense words that are pronounceable.&nbsp; Pick one that appeals to you and use that.
</p>
<p>Now have a look inside the .ssh directory.&nbsp; By convention every file or directory name that begins with a period is considered hidden by Linux, so it won't show up in a GNOME file browser window unless you use the option on the View menu to Show Hidden Files.&nbsp; When you display the contents of that directory you'll see two files: <strong>id_rsa</strong> and <strong>id_rsa.pub</strong>.&nbsp; The public key is in id_rsa.pub.&nbsp; Try opening that file with gedit (Open With Text Editor) and you'll see this:
</p>
<p><img alt="git12.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git12.jpg" height="278" width="640" />
</p>
<p>When you create your account on <a href="http://git.sugarlabs.org">git.sugarlabs.org</a> there will be a place where you can add your public SSH key.&nbsp; To do that use Select All from the Edit menu in gedit, then Copy and Paste into the field provided on the web form.
</p>
<h2>Create A New Project
</h2>
<p>I'm going to create a new Project in Git for the examples for this book.&nbsp; I need to log in with my new account and click the <strong>New Project</strong> link we saw earlier.&nbsp; I get this form, which I have started filling in:
</p>
<p><img alt="git13.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git13.jpg" height="343" width="398" />
</p>
<p>The <strong>Title</strong> is used on the website, the <strong>Slug</strong> is a shortened version of the title without spaces used to name the Git repository.&nbsp; <strong>Categories</strong> are optional.&nbsp; <strong>License</strong> is GPL v2 for my projects.&nbsp; You can choose from any of the licenses in the list for your own Projects, and you can change the license entry later if you want to.&nbsp; You will also need to enter a <strong>Description</strong> for your project.
</p>
<p>Once you have this set up you'll be able to click on the mainline entry for the Project (like we did with Read Etexts before) and see something like this:
</p>
<p><img alt="git14.jpg" src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/git14.jpg" height="454" width="640" />
</p>
<p>The next step is to convert our project files into a local Git repository, add the files to it, then push it to the repository on <a href="http://git.sugarlabs.org">git.sugarlabs.org.</a>&nbsp; We need to do this because you cannot clone an empty repository, and our remote repository is currently empty.&nbsp; To get around that problem we'll push the local repository out to the new remote repository we just created, then clone the remote one and delete our existing project and its Git repository.&nbsp; From then on we'll do all our work in the cloned repository.
  <br />
</p>
<p>This process may remind you of the Edward Albee quote, "<span class="body">Sometimes a person has to go a very long distance out of his way to come back a short distance correctly".</span> Fortunately we only need to do it once per project.&nbsp; Enter the commands shown below in <strong>bold</strong> after making you project directory the current one:
  <br />
</p>
<pre><strong>git init</strong>
Initialized empty Git repository in /home/jim/olpc/bookexamples/.git/
<strong>git add *.py</strong>
<strong>git add activity
git add MANIFEST</strong>
<strong>git add .gitignore
git commit -a -m "Create repository and load"</strong>
[master (root-commit) 727bfe8] Create repository and load
 9 files changed, 922 insertions(+), 0 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 MANIFEST
 create mode 100755 ReadEtexts.py
 create mode 100644 ReadEtextsActivity.py
 create mode 100644 ReadEtextsActivity2.py
 create mode 100644 activity/activity.info
 create mode 100644 activity/read-etexts.svg
 create mode 100755 setup.py
 create mode 100644 toolbar.py
</pre>
<p> I have made an empty local Git repository with <strong>git init</strong>, then I've used <strong>git add</strong> to add the important files to it.&nbsp; (In fact <strong>git add</strong> doesn't actually add anything itself; it just tells Git to add the file on the next <strong>git commit</strong>).&nbsp; Finally <strong>git commit</strong> with the options shown will actually put the latest version of these files in my new local repository.
</p>
<p>To push this local repository to <a href="http://git.sugarlabs.org">git.sugarlabs.org</a>&nbsp; we use the commands from the web page:
</p>
<pre><strong>git remote add origin gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline.git
git push origin master</strong>
Counting objects: 17, done.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (15/15), 7.51 KiB, done.
Total 15 (delta 3), reused 0 (delta 0)
To gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline.git
   2cb3a1e..700789d  master -&gt; master
=&gt; Syncing Gitorious...
Heads up: head of  changed to 700789d3333a7257999d0a69bdcafb840e6adc09 on master
Notify cia.vc of 727bfe819d5b7b70f4f2b31d02f5562709284ac4  on myo-sugar-activities-examples
Notify cia.vc of 700789d3333a7257999d0a69bdcafb840e6adc09  on myo-sugar-activities-examples
[OK]
<strong>rm *</strong>
<strong>rm activity -rf
rm .git -rf</strong>
<strong>cd ~</strong>
<strong>mkdir olpc</strong>
<strong>cd olpc</strong>
<strong>mkdir bookexamples</strong>
<strong>cd bookexamples
git clone git://git.sugarlabs.org/myo-sugar-activities-examples/mainline.git</strong>
Initialized empty Git repository in /home/jim/olpc/bookexamples/mainline/.git/
remote: Counting objects: 18, done.
remote: Compressing objects: 100% (16/16), done.
remote: Total 18 (delta 3), reused 0 (delta 0)
Receiving objects: 100% (18/18), 8.53 KiB, done.
Resolving deltas: 100% (3/3), done.
</pre>
<p> The lines in <strong>bold</strong> are the commands to enter, and everything else is messages that Git sends to the console. It probably isn't clear what we're doing here and why, so let's take it step by step:
</p>
<ul>
  <li>The first command <strong>git remote add origin</strong> tells the remote Git repository that we are going to send it stuff from our local repository.
  <br /></li>
  <li>The second command <strong>git push origin master</strong> actually sends your local Git repository to the remote one and its contents will be copied in.&nbsp; When you enter this command you will be asked to enter the SSH pass phrase you created in the last section.&nbsp; GNOME will remember this phrase for you and enter it for every Git command afterwards so you don't need to.&nbsp; It will keep doing this until you log out or turn off the computer.
  <br /></li>
  <li>The next step is to delete our existing files and our local Git repository (which is contained in the hidden directory .git).&nbsp; The <strong>rm .git -rf</strong> means "Delete the directory .git and everything in it".&nbsp; <strong>rm</strong> is a Unix command, not part of Git.&nbsp; If you like you can delete your existing files <em>after</em> you create the cloned repository in the next step.
  <br /></li>
  <li>Now we do the <strong>git clone</strong> command from the web page.&nbsp; This takes the remote Git repository we just added our MANIFEST file to and makes a new local repository in directory <strong>/<em>yourhome</em>/olpc/bookexamples/mainline.</strong></li>
</ul>
<p>Finally we have a local repository we can use.&nbsp; Well, not quite.&nbsp; We can commit our code to it but we cannot push anything back to the remote repository because our local repository isn't configured correctly yet.
</p>
<p>What we need to do is edit the file <strong>config</strong> in directory <strong>.git</strong> in <strong>/<em>yourhome</em>/olpc/bookexamples/mainline.&nbsp; </strong>We can use gedit to do that.&nbsp; We need to change the <strong>url=</strong> entry to point to the <strong>Push url</strong> shown on the mainline web page.&nbsp; When we're done our <strong>config</strong> file should look like this:
</p>
<pre>[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	<strong>url = gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline.git</strong>
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
</pre>
<p> The line in <strong>bold</strong> is the only one that gets changed.
</p>
<p>From now on anyone who wants to work on our project can get a local copy of the Git repository by doing this from within the directory where he wants the repository to go:
</p>
<p>
</p>
<pre><strong>git clone git://git.sugarlabs.org/myo-sugar-activities-examples/mainline.git</strong></pre>
<p> He'll have to change his <strong>.git/config</strong> file just like we did, then he'll be ready to go.
</p>
<h2>Everyday Use Of Git
</h2>
<p> While getting the repositories set up to begin with is a chore, daily use is not.&nbsp; There are only a few commands you'll need to work with.&nbsp; When we left off we had a repository in <strong>/<em>yourhome</em>/olpc/bookexamples/mainline</strong> with our files in it.&nbsp; We will need to add any new files we create too.
  <br />
</p>
<p>We use the <strong>git add</strong> command to tell Git that we want to use Git to store a particular file.&nbsp; This doesn't actually store anything, it just tells Git our intentions.&nbsp; The format of the command is simply:
</p>
<pre>git add <em>file_or_directory_name</em></pre>
<p>There are files we <em>don't</em> want to add to Git, to begin with those files that end in <strong>.pyc</strong>.&nbsp; If we never do a <strong>git add</strong> on them they'll never get added, but Git will constantly ask us why we aren't adding them.&nbsp; Fortunately there is a way to tell Git that we really, really don't want to add those files.&nbsp; We need to create a file named <strong>.gitignore</strong> using gedit and put in entries like this:
</p>
<pre>*.pyc
*.e4p
*.zip
.eric4project/
.ropeproject/</pre>
<p>These entries will also ignore project files used by Eric and zip files containing ebooks,&nbsp; Once we have this file created in the mainline directory we can add it to the repository:
</p>
<pre>git add .gitignore
git commit -a -m "Add .gitignore file"
</pre>
<p>From now on Git will no longer ask us to add .pyc or other unwanted&nbsp; files that match our patterns. If there are other files we don't want in the repository we can add them to .gitignore either as full file names or directory names or as patterns like *.pyc.
</p>
<p>&nbsp;In addition to adding files to Git we can remove them too:
</p>
<pre>git rm <em>filename</em></pre>
<p>Note that this just tells Git that from now on it will not be keeping track of a given filename, and that will take effect at the next commit.&nbsp; Old versions of the file are still in the repository.
</p>
<p>If you want to see what&nbsp;changes will be applied at the next commit run this:
</p>
<pre>git status</pre>
<p>Finally, to put your latest changes in the repository use this:
</p>
<pre>git commit &nbsp;-a -m "Put a comment here"</pre>
<p>If you leave off the -m an editor will open up and you can type in a comment, then save and exit. Unfortunately by default the editor is vi, an old text mode editor that is not friendly like gedit.
</p>
<p>When we have all our changes done we can send them to the central repository using <strong>git push</strong>:
</p>
<pre>git push</pre>
<p>We can get the latest changes from other developers by doing <strong>git pull</strong>:
</p>
<pre><strong>git pull</strong>
remote: Counting objects: 17, done.
remote: Compressing objects: 100% (14/14), done.
remote: Total 15 (delta 3), reused 0 (delta 0)
Unpacking objects: 100% (15/15), done.
From gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline
   2cb3a1e..700789d  master     -&gt; origin/master
Updating 2cb3a1e..700789d
Fast forward
 .gitignore               |    6 +
 MANIFEST                 |  244 +-----------------------------------
 ReadEtexts.py            |  182 +++++++++++++++++++++++++++
 ReadEtextsActivity.py    |  182 +++++++++++++++++++++++++++
 ReadEtextsActivity2.py   |  311 ++++++++++++++++++++++++++++++++++++++++++++++
 activity/activity.info   |    9 ++
 activity/read-etexts.svg |   71 +++++++++++
 setup.py                 |   21 +++
 toolbar.py               |  136 ++++++++++++++++++++
 9 files changed, 921 insertions(+), 241 deletions(-)
 create mode 100644 .gitignore
 create mode 100755 ReadEtexts.py
 create mode 100644 ReadEtextsActivity.py
 create mode 100644 ReadEtextsActivity2.py
 create mode 100644 activity/activity.info
 create mode 100644 activity/read-etexts.svg
 create mode 100755 setup.py
 create mode 100644 toolbar.py
&nbsp;</pre>
<p />
			</p></div>
			</div>
<div class="arrow" style="position:relative;left:10px;width:50px;float:left;bottom:5px;"><a href="#" onClick="previous();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/lefttext.png" height=20></a></div>
<div class="arrow" style="position:relative;left:528px;width:50px;float:left;bottom:5px;"><a href="#" onClick="next();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/righttext.png" height=20></a></div>
			<br>
			<br>
			<br>
			<br>
			</td>
			</tr>
		</table>
		</div>
<!-- Piwik -->
<a href="http://piwik.org" title="Web analytics" onclick="window.open(this.href);return(false);">
<script language="javascript" src="http://adam.engagetv.com/piwik/piwik.js" type="text/javascript"></script>
<script type="text/javascript">
<!--
piwik_action_name = '';
piwik_idsite = 1;
piwik_url = 'http://adam.engagetv.com/piwik/piwik.php';
piwik_log(piwik_action_name, piwik_idsite, piwik_url);
//-->
</script>
<!-- /Piwik --> 
<script language="Javascript">
document.getElementById("UsingVersionControl").style.backgroundColor="#F99B1C";
</script>
</body>
</html>