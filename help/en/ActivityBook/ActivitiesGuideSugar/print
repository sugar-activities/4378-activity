<html>
<head>
<title>  _all &lt; ActivitiesGuideSugar &lt; TWiki</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta  name="robots" content="noindex" /> <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/bin/view/ActivitiesGuideSugar/WebRss" />
  <base href="http://en.flossmanuals.net/bin/view/ActivitiesGuideSugar/_all" />
<style type="text/css" media="screen">
@import url(/floss/pub/TWiki/BasicSkin/gray.theme.css);
@import url(/floss/pub/TWiki/BasicSkin/typography.css);
</style>

<style type="text/css" media="screen">
.twikiToc {
float : left;
position : relative;
	 background: white; display:block;
	 border-style:solid;border-width: 0px;border-color:black;
	 font-size: 10px;
	 color:black;
}
A:link {color:black;}
<!--/*--><![CDATA[<!--*/
%DS_TOPICCSS%
/*]]>*/-->
</style>
</head><body><h1>Introduction 
</h1>
<p>The purpose of this book is to teach you what you need to know to write Activities for Sugar, the operating environment developed for the One Laptop Per Child project. This book does not assume that you know how to program a computer. It is my hope that this book will be helpful to those just starting out in programming.
</p>
<p>If you just want to learn how to write computer programs Sugar provides many Activities to help you do that: Etoys, Turtle Art, Scratch, and Pippy. None of these are really suitable for creating Activities so I won't cover them in this book, but they're a great way to learn about programming. If you decide after playing with these that you'd like to try writing an Activity after all you'll have a good foundation of knowledge to build on.
</p>
<p>If you have done some programming then you know how satisfying it can be to use a program that you made yourself, one that does exactly what you want it to do.&nbsp; Creating a Sugar Activity takes that enjoyment to the next level.&nbsp; A useful Sugar Activity can be translated by volunteers into every language, be downloaded hundreds of times a week and used every day by students all over the world.
  <br />
</p>
<p>A book that teaches <em>everything</em> you need to know to write Activities would be really, really long and would duplicate material that is already available elsewhere. Because of this, I am going to write this as sort of a guided tour of Activity development. That means, for example, that I'll teach you what Python is and why it's important to learn it but I won't teach you the Python language itself. There is an excellent tutorial on the Internet that will do that, and I'll refer you to that tutorial.
</p>
<p>I started writing Activities shortly after I received my XO laptop. When I started I didn't know <em>any</em> of the material that will be in this book. I had a hard time knowing where to begin. What I did have going for me though was a little less than 30 years as a professional programmer. As a result of that I think like a programmer. A good programmer can take a complex task and divide it up into manageable pieces. He can figure out how things <em>must</em> work, and from that figure out how they <em>do</em> work. He knows how to ask for help and where. If there is no obvious place to begin he can begin <em>somewhere</em> and eventually get where he needs to go.
</p>
<p>Because I went through this process I think I can be a pretty good guide to writing Sugar Activities. I hope to also teach you how to think like a programmer does.
</p><h1>What is Sugar?
</h1>
<p>Sugar is the user interface designed for the XO laptop. It can now be installed on most PCs, including older models that can't run the latest Windows software. You can also install it on a thumb drive (Sugar on a Stick) and boot your PC from that.
</p>
<p>When the XO laptop first came out some people questioned the need for a new user interface. Wouldn't it be better for children to learn something more like what they would use as adults? Why not give them Microsoft Windows instead?
</p>
<p>This would be a reasonable question if the goal was to train children to use computers and nothing else. It would be even more reasonable if we could be sure that the software they would use as adults looked and worked like the Microsoft Windows of today.&nbsp; These are of course not reasonable assumptions.
</p>
<p>The OLPC project is not just about teaching computer literacy. It is about teaching <em>everything</em>: reading, writing, arithmetic, history, science, arts and crafts, computer programming, music composition, and everything else. Not only do we expect the child to use the computer for his schoolwork, we expect him to take it home and use it for his own explorations into subjects that interest him.&nbsp;
</p>
<p>This is a great deal more than anyone has done with computers for education, so it is reasonable to rethink how children should work with computers. Sugar is the result of that rethinking.
</p>
<p>Sugar has the following unique features:
</p>
<h2>The Journal
</h2>
<p>The Journal is where all the student's work goes. Instead of files and folders there is a list of Journal entries. The list is sorted in descending order by the date and time it was last worked on. In a way it's like the "Most Recently Used" document menu in Windows, except instead of containing just the last few items it contains everything and is the normal way to save and resume work on something.
</p>
<p>The Journal makes it easy to organize your work.&nbsp; If you've ever downloaded a file using a web browser, then had to look for it afterwards because it went in some directory other than the one you expected, or if you ever had to help your parents when they were in a similar situation, you can understand the value of the Journal.
  <br />
</p>
<p>The Journal has metadata for each item in it. Metadata is information about information. Every Journal entry has a title, a description, a list of keywords, and a screen shot of what it looked like the last time it was used. It has an activity id that links it to the Activity that created it, and it may have a MIME type as well (which is a way of identifying Journal entries so that items not created by an Activity may still be used by an Activity that supports that MIME type).
</p>
<p>In addition to these common metadata items a Journal entry may be given custom metadata by an Activity. For instance, the Read Activity uses custom metadata to save the page number you were reading when you quit the Activity. When you resume reading later the Activity will put you on that page again.
</p>
<p>In addition to work created by Activities, the Journal can contain Activities themselves. To install an Activity you can use the Browse Activity to visit the website <a href="http://activities.sugarlabs.org/">http://activities.sugarlabs.org</a> and download it. It will automatically be saved to the Journal and be ready for use. If you don't want the Activity anymore, simply delete it from the Journal and it's <em>completely gone</em>. No uninstall programs, no dialog boxes telling you that such and such a .DLL doesn't seem to be needed anymore and do you want to delete it? No odd bits and pieces left behind.
</p>
<h2>Collaboration
</h2>
<p>The second unique feature Sugar is Collaboration. Collaboration means that Activities can be used by more than one person at the same time. While not every Activity needs collaboration and not every Activity that could use it supports it, a really first rate Activity will provide some way to interact with other Sugar users on the network. For instance, all the e-book reading Activities provide a way of giving a copy of the book you're reading to a friend or to the whole class. The Write Activity lets several students work on the same document together. The Distance Activity lets two students see how far apart from each other they are.
</p>
<p>There are five views of the system you can switch to at the push of a button (Function Keys F1-5). They are:
</p>
<ul>
  <li>
  <p>The Neighborhood View
  </p> </li>
  <li>
  <p>The Friends View
  </p> </li>
  <li>
  <p>The Activity Ring
  </p> </li>
  <li>
  <p>The Journal
  </p> </li>
  <li>
  <p>The Current Activity (you can run more than one Activity at a time and switch between them but one of them will be considered the current Activity and the others will be in the background).
  </p> </li>
</ul>
<p>Of these Views, the first two are used for Collaboration.
</p>
<p>The Neighborhood View shows icons for everyone on the network. Every icon looks like a stick figure made by putting an “O” above an “X”. Each icon has a name, chosen by the student when he sets up his computer. Every icon is displayed in two colors, also chosen by the student. In addition to these “XO” icons there will be icons representing mesh networks and others representing WiFi hot spots. Finally there will be icons representing Activities that their owners wish to share.
</p>
<p>To understand how this works consider the Chat Activity. The usual way applications do chat is to have all the participants start up a chat client and visit a particular chat room at the same time. With Sugar it's different. One student starts the Chat Activity on his own computer and goes to the Neighborhood View to invite others on the network to participate. They will see a Chat icon in their own Neighborhood View and they can accept. The act of accepting starts up their own Chat Activity and connects them to the other participants.
</p>
<p>The Friends View is similar to the Neighborhood View, but only contains icons for people you have designated as Friends. Collaboration can be offered at three levels: with individual persons, with the whole Neighborhood, and with Friends. Note that the student alone decides who his Friends are. There is no need to ask to be someone's Friend.
</p>
<h2>Security
</h2>
<p>Protecting computers from malicious users is very important, and if the computers belong to students it is doubly important. It is also more difficult, because we can't expect young students to remember passwords and keep them secret. Since Sugar runs on top of Linux viruses aren't much of a problem, but malicious Activities definitely are. If an Activity was allowed unrestricted access to the Journal, for instance, it could wipe it out completely. Somebody could write an Activity that seems to be harmless and amusing, but perhaps after some random number of uses it could wipe out a student's work.
</p>
<p>The most common way to prevent a program from doing malicious things is to make it run in a sandbox. A sandbox is a way to limit what a program is allowed to do. With the usual kind of sandbox you either have an untrusted program that can't do much of anything or a trusted program that is not restricted at all. An application becomes trusted when a third party vouches for it by giving it a “signature”. The signature is a mathematical operation done on the program that only remains valid if the program is not modified.
</p>
<p>Sugar has a more sophisticated sandbox for Activities than that. No Activity needs to be trusted or is trusted. Every Activity can only work with the Journal in a limited, indirect way. Each Activity has directories specific to it that it can write to, and all other directories and files are limited to read-only access. In this way no Activity can interfere with the workings of any other Activity. In spite of this, an Activity can be made to do what it needs to do.
</p>
<p>Sugar's security mechanisms are called Rainbow and BitFrost.
</p>
<h2>Summary
</h2>
<p>Sugar is an operating environment designed to support the education of children. It organizes a child's work without needing files and folders. It supports collaboration between students. Finally, it provides a robust security model that prevents malicious programs from harming a student's work.
</p>
<p>It would not be surprising to see these features someday adopted by other desktop environments.
</p><h1>What is a Sugar Activity?
</h1>
<meta http-equiv="CONTENT-TYPE" content="text/html; charset=utf-8" />
<title></title>
<p class="western">A Sugar Activity is a self-contained Sugar application packaged in a .xo bundle.
</p>
<p class="western">An .xo bundle is an archive file in the Zip format, which has a MANIFEST file listing everything in the bundle, plus an activity.info file that has attributes describing the Activity as name=value pairs.&nbsp; These attributes include the Activity name, its version number, an identifier, and other things we will discuss when we write your first Activity. An .xo bundle will also contain an icon file (in SVG format), files containing translations of the label text the Activity uses into many languages, and the program code to run the Activity.
</p>
<p>A Sugar Activity will generally have some Python code that extends a Python class called Activity.&nbsp; It may also make use of code written in other languages if that code is written in a way that allows it to be used from Python (this is called having Python bindings).
  <br />
</p>
<p class="western">There are only a few things that an Activity can depend on being included with every version of Sugar. These include modules like Evince (PDF and other document viewing) and Gecko (rendering web pages). Everything needed to run the Activity that is <em>not</em> supplied by Sugar must go in the bundle file.
</p>
<p class="western">You can install an Activity by copying or downloading it to the Journal. You uninstall it by removing it from the Journal. There is no Install Shield to deal with, no deciding where you want the files installed, no “.DLL Hell”.
</p>
<p class="western">An Activity generally creates and reads objects in the Journal. A first rate Activity will support some kind of collaboration.
</p>
<p>
</p><h1>What Do I Need To Know To Write A Sugar Activity?&nbsp;
</h1>
<p class="western">If you are going to write Sugar Activities you should learn something about the topics described in this chapter. There is no need to become an expert in any of them, but you should bookmark their websites and skim through their tutorials. This will help you to understand the code samples we'll be looking at.
</p>
<h2 class="western">Python
</h2>
<p class="western">Python is the most used language for writing Activities. Every Activity has at least some Python in it.
</p>
<p class="western">There are compiled languages and interpreted languages. In a compiled language the code you write is translated into the language of the chip it will run on and it is this translation that is actually run by the OS. In an interpreted language there is a program called an interpreter that reads the code you write and does what the code tells it to do. (This is over simplified, but close enough to the truth for this chapter).
</p>
<p class="western">Python is an interpreted language. There are advantages to having a language that is compiled and there are advantages to having an interpreted language. The advantages Python has for developing Activities are:
</p>
<ul>
  <li>
  <p class="western">It is portable. In other words, you can make your program run on any chip and any OS without making a version specific to each one. Compiled programs only run on the OS and chip they are compiled for.
  </p> </li>
  <li>
  <p class="western">Since the source code is the thing being run, you can't give someone a Python program without giving them the source code. You can learn a lot about Activity programming by studying other people's code, and there is plenty of it to study.
  </p> </li>
  <li>
  <p class="western">It is an easy language for new programmers to learn, but has language features that experienced programmers demand.
  </p> </li>
  <li>
  <p class="western">It is widely used. One of the best known Python users is Google. They use it enough that they have started a project named “Unladen Swallow” to make Python programs run faster.
  </p> </li>
</ul>
<p class="western">The big advantage of a compiled language is that it can run much faster than an interpreted language. In actual practice a Python program can perform as well as a compiled program. To understand why this is you need to understand how a Python program is made.
</p>
<p class="western">Python is known as a “glue” language. The idea is that you have components written in various languages (usually C and C++) and they have Python bindings. Python is used to “glue” these components together to create applications. In most applications the bulk of the application's function is done by these compiled components, and the application spends relatively little time running the Python code that glues the components together.
</p>
<p class="western">In addition to Activities using Python most of the Sugar environment itself is written in Python.
</p>
<p class="western">If you have programmed in other languages before there is a good tutorial for learning Python at the Python website: <a href="http://docs.python.org/tutorial/">http://docs.python.org/tutorial/</a>.&nbsp; If you're just starting out in programming you might check out <em>Invent Your Own Computer Games With Python</em>, which you can read for free at <a href="http://inventwithpython.com/" target="_top">http://inventwithpython.com/</a>.
  <br />
</p>
<h2 class="western">PyGTK
</h2>
<p class="western">GTK+ is a set of components for creating user interfaces. These components include things like buttons, scroll bars, list boxes, and so on. It is used by GNOME desktop environment and the applications that run under it. Sugar Activities use a special GNOME theme that give GTK+ controls a unique look.
</p>
<p class="western">PyGTK is a set of Python bindings that let you use GTK+ components in Python programs. There is a tutorial showing how to use it at the PyGTK website: <a href="http://www.pygtk.org/tutorial.html">http://www.pygtk.org/tutorial.html</a>.
</p>
<h2 class="western">PyGame
</h2>
<p class="western">The alternative to using PyGTK for your Activity is PyGame. PyGame can create images called sprites and move them around on the screen. As you might expect, PyGame is mostly used for writing games. It is less commonly used in Activities than PyGTK.
</p>
<p class="western">The tutorial to learn about PyGame is at the PyGame website: <a href="http://www.pygame.org/wiki/tutorials">http://www.pygame.org/wiki/tutorials</a>. The website also has a bunch of pygame projects you can download and try out.
</p><h1>Setting Up a Sugar Development Environment
</h1>
<p class="western">It is not currently practical to develop Activities for the XO on the XO. It's not so much that you can't do it, but that it's easier and more productive to do your development and testing on another machine running a more conventional OS. This gives you access to better tools and it also enables you to simulate collaboration between two computers running Sugar using only one computer.
</p>
<h2 class="western">Install Linux Or Use A Virtual Machine?
</h2>
<p class="western">Even though Sugar runs on Linux it is possible to do development in Windows running a complete instance of Sugar in a virtual machine. A virtual machine is a way to run one operating system on top of another one. The operating system being run is fooled into thinking it has the whole computer to itself. (Computer industry pundits will tell you that using virtual machines is the newest new thing out there. Old timers like me know that IBM was doing it on their mainframe computers back in the 1970's).
</p>
<p class="western">For awhile this was actually the recommended way to develop Activities. The version of Linux that Sugar used was different enough from regular Linux distributions that even Linux users were running Sugar in a virtual machine on top of Linux.
</p>
<p class="western">The situation has improved, and most current Linux distributions have a usable Sugar environment.
</p>
<p class="western">If you're used to Windows you might think that running Sugar in a VM from Windows instead of installing Linux might be the easier option. In practice it is not. Linux running in a VM is still Linux, so you're still going to have to learn some things about Linux to do Activity development. Also, running a second OS in a VM requires a really powerful machine with gigabytes of memory. On the other hand, I do my Sugar development using Linux on an IBM NetVista Pentium IV I bought used for a little over a hundred dollars, shipping included. It is more than adequate.
</p>
<p class="western">Installing Linux is not the test of manhood it once was. Anyone can do it. The GNOME desktop provided with Linux is very much like Windows so you'll feel right at home using it.
</p>
<p class="western">When you install Linux you have the option to do a dual boot, running Linux and Windows on the same computer (but not at the same time). This means you set aside a disk partition for use by Linux and when you start the computer a menu appears asking which OS you want to start up. The Linux install will even create the partition for you, and a couple of gigabytes is more than enough disk space. Sharing a computer with a Linux installation will not affect your Windows installation at all.
  <br />
</p>
<p class="western">Sugar Labs has been working to get Sugar included with all Linux distributions. If you already have a favorite distribution, chances are the latest version of it includes Sugar. Fedora, openSuse, Debian, and Ubuntu all include Sugar. If you already use Linux, see if Sugar is included in your distribution. If not, Fedora is what is used by the XO computer so Fedora 10 or later might be your best bet. You can download the Fedora install CD or DVD here: <a href="https://fedoraproject.org/get-fedora">https://fedoraproject.org/get-fedora</a>.
</p>
<p class="western">It is worth pointing out that all of the other tools I'm recommending are included in every Linux distribution, and they can be installed with no more effort than checking a check box. The same tools often will run on Windows, but installing them there is more work than you would expect for Windows programs.
</p>
<p class="western">If you want to do development on a Macintosh emulation is still your only option. If you want to try the emulation option details will be found here: <a href="http://wiki.laptop.org/go/Developers/Setup">http://wiki.laptop.org/go/Developers/Setup.</a>
</p>
<h2 class="western">What About Using sugar-jhbuild?
</h2>
<p class="western">Sugar-jhbuild is a script that downloads the source code for the latest version of all the Sugar modules and compiles it in such a way that it doesn't interfere with the modules that make up your normal desktop. If you are developing Sugar itself, or if you are developing Activities that depend on the very latest Sugar features you'll need to run sugar-jhbuild.
</p>
<p class="western">Running this script can take hours and occasionally it will fail leaving you with an unusable Sugar environment.
</p>
<p class="western">Should you consider using it? The short answer is no. A longer answer is <em>probably not yet</em>.
</p>
<p class="western">If you want your Activities to reach the widest possible audience you <em>don't</em> want the latest Sugar. In fact, if you want a test environment that mimics what is on most XO computers right now you need to use Fedora 10. Because updating operating systems in the field can be a major undertaking for a school most XO's will be running Sugar .82 or older for quite some time.
</p>
<p class="western">Of course it is also important to have developers that want to push the boundaries of what Sugar can do. If after developing some Activities you decide you need to be one of them you can learn about running sugar-jhbuild here: <a href="http://wiki.sugarlabs.org/go/DevelopmentTeam/Jhbuild">http://wiki.sugarlabs.org/go/DevelopmentTeam/Jhbuild.</a>
</p>
<h2 class="western">Eric
</h2>
<p class="western">Developers today expect their languages to be supported by an Integrated Development Environment and Python is no exception. An IDE helps to organize your work and provides text editing and a built in set of programming and debugging tools.
</p>
<p class="western">There are two Python IDE's I'm aware of: Eric and Idle. Eric is the fancier of the two and I recommend it. Every Linux distribution should include it. It looks like it might work on Windows too. You can learn more about it at the Eric website: <a href="http://eric-ide.python-projects.org/">http://eric-ide.python-projects.org/</a>.
</p>
<h2 class="western">Inkscape
</h2>
<p class="western">Inkscape is a tool for creating images in SVG format. Sugar uses SVG for Activity icons and other kinds of artwork. The “XO” icon that represents each child in the Neighborhood view is an SVG file that can be modified.
</p>
<p class="western">Inkscape comes with every Linux distribution, and can be installed on Windows as well. You can learn more about it here: <a href="http://www.inkscape.org/">http://www.inkscape.org/</a>.
</p>
<h2 class="western">Git
</h2>
<p class="western">Git is a version control system. It stores versions of your program code in a way that makes them easy to get back. Whenever you make changes to your code you ask Git to store your code in its repository. If you need to look at an old version of that code later you can. Even better, if some problem shows up in your code you can compare your latest code to an old, working version and see exactly what lines you changed.
</p>
<p class="western">If there are two people working on the same program independently a version control system will merge their changes together automatically.
</p>
<p class="western">Suppose you're working on a major new version of your Activity when someone finds a really embarrassing bug in the version you just released. If you use Git you don't need to tell people to live with it until the next release, which could be months away. Instead you can create a branch of the previous version and work on it alongside the version you're enhancing. In effect Git treats the old version you're fixing and the version you're improving as two separate projects.
</p>
<p class="western">You can learn more about Git at the Git website: <a href="http://git-scm.com/">http://git-scm.com/</a>.
</p>
<p class="western">When you're ready for a Git repository for your project you can learn how to set that up here: <a href="http://git.sugarlabs.org/">http://git.sugarlabs.org/</a>.
</p>
<h2 class="western">The GIMP
</h2>
<p class="western">The GIMP is one of the most useful and badly named programs ever developed. You can think of it as a free version of Adobe Photoshop. If you need to work with image files (other than SVG's) you need this program.
</p>
<p class="western">You may never need this program to develop the Activity itself, but when it's time to distribute the Activity you'll use it to create screen shots of your Activity in action. Nothing sells an Activity to a potential user like good screen shots.
</p>
<h2 class="western">Sugar Emulation
</h2>
<p class="western">Most Linux distributions should have Sugar included. In Fedora you can run Sugar as an alternative desktop environment. When you log in to GDM Sugar appears as a desktop selection alongside GNOME, KDE, Window Maker, and any other window managers you have installed.
</p>
<p class="western">This is not the normal way to use Sugar for testing. The normal way uses a tool called Xephyr to run a Sugar environment in a window on your desktop. In effect, Xephyr runs an X session inside a window and Sugar runs in that. You can easily take screen shots of Sugar in action, stop and restart Sugar sessions without restarting the computer, and run multiple copies of Sugar to test collaboration.
</p>
<p class="western">I'll have more to say about this when it's time to test your first Activity.
</p> &nbsp;
<p>
</p><h1>Creating your First Sugar Activity
</h1>
<h2 class="western">Make A Standalone Python Program First
</h2>
<p class="western">The best advice I could give a beginning Activity developer is to make a version of your Activity that can run on its own, outside of the Sugar environment. Testing and debugging a Python program that stands alone is faster, easier and less tedious than doing the same thing with a similar Activity. You'll understand why when you start testing your first Activity.
</p>
<p class="western">The more bugs you find before you turn your code into an Activity the better. In fact, it's a good idea to keep a standalone version of your program around even after you have the Activity version well underway. I used my standalone version of Read Etexts to develop the text to speech with highlighting feature. This saved me a <em>lot</em> of time, which was especially important because I was figuring things out as I went.
</p>
<p>Our first project will be a version of the Read Etexts Activity I wrote.
  <br />
</p>
<h2 class="western">Inherit From The sugar.activity.Activity Class
</h2>
<p>Next we're going to take our standalone Python program and make an Activity out of it.&nbsp; To do this we need to understand the concept of <em>inheritance</em>.&nbsp; In everyday speech inheritance means getting something from your parents that you didn't work for.&nbsp; A king will take his son to a castle window and say, "Someday, lad, this will all be yours!"&nbsp; That's inheritance.
</p> In the world of computers programs can have parents and inherit things from them.&nbsp; Instead of inheriting property, they inherit code. There is a piece of Python code called sugar.activity.Activity that's the best parent an Activity could hope to have, and we're going to convince it to adopt our program.&nbsp; This doesn't mean that our program will never have to work again,&nbsp; but it won't have to work as much.
<br />
<h2>Package The Activity
</h2>
<p>Now we have to package up our code to make it something that can be run under Sugar and distributed as an .xo file.&nbsp; This involves setting up a MANIFEST, activity.info, setup.py, and creating a suitable icon with Inkscape.
  <br />
</p>
<h2 class="western">Add Refinements
</h2>
<p class="western">Every Activity will have the basic Activity toolbar. For most Activities this will not be enough, so we'll need to create some custom toolbars as well. Then we need to hook them up to the rest of the Activity code so that what happens to the toolbar triggers actions in the Activity and what happens outside the toolbar is reflected in the state of the toolbar.
</p>
<p class="western">In addition to toolbars we'll look at some other ways to spiff up your Activity.
  <br />
</p>
<h2> Put The Project Code In Version Control
  <br />
</h2>
<p>By this time we'll have enough code written that it's worth protecting and sharing with the world.&nbsp; To do that we need to create a Git repository and add our code to it.&nbsp; We'll also go over the basics of using Git.
  <br />
</p>
<h2> Going International With Pootle
</h2>
<p>Now that our code is in Git we can request help from our first collaborator: the Pootle translation system.&nbsp; With a little setup work we can get volunteers to make translated versions of our Activity available.
</p>
<h2>Distributing The Activity
</h2>
<p>In this task we'll take our Activity and set it up on <a href="http://activities.sugarlabs.org">http://activities.sugarlabs.org</a>&nbsp; plus we'll package up the source code so it can be included in Linux distributions.
  <br />
</p>
<h2> Add Collaboration
</h2>
<p>Next we'll add code to share e-books with Friends and the Neighborhood.
  <br />
</p>
<h2>Add Text To Speech
</h2>
<p>Text to Speech with word highlighting is next.&nbsp; Our simple project will become a Kindle-killer!
  <br />
</p><h1> A Standalone Python Program For Reading Etexts
</h1>
<h2>The Program
  <br />
</h2>
<p>Our example program is based on the first Activity I wrote, Read Etexts.&nbsp; This is a program for reading free e-books.
  <br />
</p>
<p>The oldest and best source of free e-books is a website called Project Gutenberg <a href="http://www.gutenberg.org/wiki/Main_Page).">(<a href="http://www.gutenberg.org/wiki/Main_Page" target="_top">http://www.gutenberg.org/wiki/Main_Page</a>).</a>&nbsp; They create books in plain text format, in other words the kind of file you could make if you typed a book into Notepad and hit the Enter key at the end of each line.&nbsp; They have thousands of books that are out of copyright, including some of the best ever written.&nbsp; Before you read further go to that website and pick out a book that interests you.&nbsp; Check out the "Top 100" list to see the most popular books and authors.
</p>
<p>The program we're going to create will read books in plain text format only.&nbsp; Fire up <em>Eric</em>, create a new Project named <em>BookExamples</em>, and create a new file called <strong>ReadEtexts.py</strong>.&nbsp; Then use copy and paste to get the code below into that file and save it.
</p>
<pre>#! /usr/bin/env python
import sys
import os
import zipfile
import pygtk
import gtk
import getopt
import pango

page=0
PAGE_SIZE = 45

class ReadEtexts():

    def keypress_cb(self, widget, event):
        "Respond when the user presses one of the arrow keys"
        keyname = gtk.gdk.keyval_name(event.keyval)
        if keyname == 'plus':
            self.font_increase()
            return True
        if keyname == 'minus':
            self.font_decrease()
            return True
        if keyname == 'Page_Up' :
            self.page_previous()
            return True
        if keyname == 'Page_Down':
            self.page_next()
            return True
        if keyname == 'Up' or keyname == 'KP_Up' \
                or keyname == 'KP_Left':
            self.scroll_up()
            return True
        if keyname == 'Down' or keyname == 'KP_Down' \
                or keyname == 'KP_Right':
            self.scroll_down()
            return True
        return False

    def page_previous(self):
        global page
        page=page-1
        if page &lt; 0: page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.upper - v_adjustment.page_size

    def page_next(self):
        global page
        page=page+1
        if page &gt;= len(self.page_index): page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.lower

    def font_decrease(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size - 1
        if font_size &lt; 1:
            font_size = 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def font_increase(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size + 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def scroll_down(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.upper - \
                v_adjustment.page_size:
            self.page_next()
            return
        if v_adjustment.value &lt; v_adjustment.upper - v_adjustment.page_size:
            new_value = v_adjustment.value + v_adjustment.step_increment
            if new_value &gt; v_adjustment.upper - v_adjustment.page_size:
                new_value = v_adjustment.upper - v_adjustment.page_size
            v_adjustment.value = new_value

    def scroll_up(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.lower:
            self.page_previous()
            return
        if v_adjustment.value &gt; v_adjustment.lower:
            new_value = v_adjustment.value - \
                v_adjustment.step_increment
            if new_value &lt; v_adjustment.lower:
                new_value = v_adjustment.lower
            v_adjustment.value = new_value

    def show_page(self, page_number):
        global PAGE_SIZE, current_word
        position = self.page_index[page_number]
        self.etext_file.seek(position)
        linecount = 0
        label_text = '\n\n\n'
        textbuffer = self.textview.get_buffer()
        while linecount &lt; PAGE_SIZE:
            line = self.etext_file.readline()
            label_text = label_text + unicode(line, 'iso-8859-1')
            linecount = linecount + 1
        label_text = label_text + '\n\n\n'
        textbuffer.set_text(label_text)
        self.textview.set_buffer(textbuffer)

    def save_extracted_file(self, zipfile, filename):
        "Extract the file to a temp directory for viewing"
        filebytes = zipfile.read(filename)
        f = open("/tmp/" + filename, 'w')
        try:
            f.write(filebytes)
        finally:
            f.close

    def read_file(self, filename):
        "Read the Etext file"
        global PAGE_SIZE

        if zipfile.is_zipfile(filename):
            self.zf = zipfile.ZipFile(filename, 'r')
            self.book_files = self.zf.namelist()
            self.save_extracted_file(self.zf, self.book_files[0])
            currentFileName = "/tmp/" + self.book_files[0]
        else:
            currentFileName = filename

        self.etext_file = open(currentFileName,"r")
        self.page_index = [ 0 ]
        linecount = 0
        while self.etext_file:
            line = self.etext_file.readline()
            if not line:
                break
            linecount = linecount + 1
            if linecount &gt;= PAGE_SIZE:
                position = self.etext_file.tell()
                self.page_index.append(position)
                linecount = 0
        if filename.endswith(".zip"):
            os.remove(currentFileName)

    def destroy_cb(self, widget, data=None):
        gtk.main_quit()

    def main(self, file_path):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("destroy", self.destroy_cb)
        self.window.set_title("Read Etexts")
        self.window.set_size_request(640, 480)
        self.window.set_border_width(0)
        self.read_file(file_path)
        self.scrolled_window = gtk.ScrolledWindow(hadjustment=None, \
                                                  vadjustment=None)
        self.textview = gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_left_margin(50)
        self.textview.set_cursor_visible(False)
        self.textview.connect("key_press_event", self.keypress_cb)
        buffer = self.textview.get_buffer()
        self.font_desc = pango.FontDescription("sans 12")
        font_size = self.font_desc.get_size()
        self.textview.modify_font(self.font_desc)
        self.show_page(0)
        self.scrolled_window.add(self.textview)
        self.window.add(self.scrolled_window)
        self.textview.show()
        self.scrolled_window.show()
        v_adjustment = self.scrolled_window.get_vadjustment()
        self.window.show()
        gtk.main()

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "")
        ReadEtexts().main(args[0])
    except getopt.error, msg:
        print msg
        print "This program has no options"
        sys.exit(2)
</pre>
<h2> Running The Program
</h2>
<p>To run the program you should first make it executeable.&nbsp; You only need to do this once:
</p>
<pre>chmod 755 ReadEtexts.py</pre>
<p>For this example I downloaded the file for Pride and Prejudice.&nbsp; The program will work with either of the Plain text formats, which are either uncompressed text or a Zip file.&nbsp; The zip file is named 1342.zip, and we can read the book by running this from a terminal:
</p>
<pre>./ReadEtexts.py 1342.zip</pre>
<p>This is what the program looks like in action:
</p>
<p><img alt="The standalone Read Etexts program in action." src="/floss/pub/ActivitiesGuideSugar/ReadEtexts_01_1.jpg" height="503" width="646" />
</p>
<p>You can use the <em>Page Up, Page Down, Up, Down, Left</em>, and <em>Right</em> keys to navigate through the book and the '+' and '-' keys to adjust the font size.
</p>
<h2>How The Program Works
</h2>
<p>This program reads through the text file containing the book and divides it into pages of 45 lines each.&nbsp; We need to do this because the gtk.TextView component we use for viewing the text would need a lot of memory to scroll through the whole book and that would hurt performance.&nbsp; A second reason is that we want to make reading the e-book as much as possible like reading a regular book, and regular books have pages.&nbsp; If a teacher assigns reading from a book she might say "read pages 35-50 for tommorow".&nbsp; Finally, we want this program to remember what page you stopped reading on and bring you back to that page again when you read the book next time.&nbsp; (The program we have so far doesn't do that yet).
</p>
<p>To page through the book we use <em>random access</em> to read the file.&nbsp; To understand what random access means to a file, consider a VHS tape and a DVD.&nbsp; To get to a certain scene in a VHS tape you need to go through all the scenes that came before it, in order.&nbsp; Even though you do it at high speed you still have to look at all of them to find the place you want to start watching.&nbsp; This is <em>sequential access</em>.&nbsp; On the other hand a DVD has chapter stops and possibly a chapter menu.&nbsp; Using a chapter menu you can look at any scene in the movie right away, and you can skip around as you like.&nbsp; This is random access, and the chapter menu is like an <em>index</em>.&nbsp; Of course you can access the material in a DVD sequentially too.
</p>
<p>We need random access to skip to whatever page we like, and we need an index so that we know where each page begins.&nbsp; We make the index by reading the entire file one line at a time.&nbsp; Every 45 lines we make a note of how many characters into the file we've gotten and store this information in a Python list.&nbsp; Then we go back to the beginning of the file and display the first page.&nbsp; When the program user goes to the next or previous page we figure out what the new page number will be and look in the list entry for that page.&nbsp; This tells us that page starts 4,200 characters into the file.&nbsp; We use seek() on the file to go to that character and then we read 45 lines starting at that point and load them into the TextView.
</p>
<p>When you run this program notice how fast it is.&nbsp; Python programs take longer to run a line of code than a compiled language would, but in this program it doesn't matter because the heavy lifting in the program is done by the TextView, which was created in a compiled language.&nbsp; The Python parts don't do that much so the program doesn't spend much time running them.
</p>
<p>Sugar uses Python a lot, not just for Activities but for the Sugar environment itself.&nbsp; You may read somewhere that using so much Python is "a disaster" for performance.&nbsp; Don't believe it.
</p>
<p>There are no slow programming languages, only slow programmers.
  <br />
</p><h1>Inherit From sugar.activity.Activity
</h1>
<h2>Object Oriented Python
  <br />
</h2>
<p class="western">Python supports two styles of programming: <em>procedural</em> and <em>object oriented</em>. Procedural programming is when you have some input data, do some processing on it, and produce an output. If you want to calculate all the prime numbers under a hundred or convert a Word document into a plain text file you'll probably use the procedural style to do that.
</p>
<p class="western">Object oriented programs are built up from units called <em>objects</em>. An object is described as a collection of fields or attributes containing data along with methods for doing things with that data. In addition to doing work and storing data objects can send messages to one another.
</p>
<p class="western">Consider a word processing program. It doesn't have just one input, some process, and one output. It can receive input from the keyboard, from the mouse buttons, from the mouse traveling over something, from the clipboard, etc. It can send output to the screen, to a file, to a printer, to the clipboard, etc. A word processor can edit several documents at the same time too. Any program with a GUI is a natural fit for the object oriented style of programming.
</p>
<p class="western">Objects are described by <em>classes</em>. When you create an object you are creating an <em>instance</em> of a class.
</p>
<p class="western">There's one other thing that a class can do, which is to <em>inherit</em> methods and attributes from another class. When you define a class you can say it <em>extends</em> some class, and by doing that in effect your class has the functionality of the other class plus its own functionality. The extended class becomes its parent.
  <br />
</p>
<p class="western">All Sugar Activities extend a Python class called <em>sugar.activity.Activity</em>. This class provides methods that all Activities need. In addition to that, there are methods that you can override in your own class that the parent class will call when it needs to. For the beginning Activity writer three methods are important:
</p>
<p class="western"><em>__init__()</em>
</p>
<p class="western">This is called when your Activity is started up. This is where you will set up the user interface for your Activity, including toolbars.
</p>
<p class="western"><em>read_file(self, file_path)</em>
</p>
<p class="western">This is called when you resume an Activity from a Journal entry. It is called after the <em>__init__()</em> method is called. The file_path parameter contains the name of a temporary file that is a copy of the file in the Journal entry. The file is deleted as soon as this method finishes, but because Sugar runs on Linux if you open the file for reading your program can continue to read it even after it is deleted and it the file will not actually go away until you close it.
</p>
<p class="western"><em>write_file(self, file_path)</em>
</p>
<p class="western">This is called when the Activity updates the Journal entry. Just like with <em>read_file()</em> your Activity does not work with the Journal directly. Instead it opens the file named in file_path for output and writes to it. That file in turn is copied to the Journal entry.
</p>
<p class="western">There are three things that can cause <em>write_file()</em> to be executed:
</p>
<ul>
  <li>
  <p class="western">Your Activity closes.
  </p> </li>
  <li>
  <p class="western">Someone presses the <strong>Keep</strong> button in the Activity toolbar.
  </p> </li>
  <li>
  <p class="western">Your Activity ceases to be the active Activity, or someone moves from the Activity View to some other View.
  </p> </li>
</ul>
<p class="western">In addition to updating the file in the Journal entry the <em>read_file()</em> and <em>write_file()</em> methods are used to read and update the metadata in the Journal entry.
</p>
<p> When we convert our standalone Python program to an Activity we'll take out much of the code we wrote and replace it with code inherited from the sugar.activity.Activity&nbsp; class.
</p>
<h2>Extending The Activity Class
</h2>
<p>Here's a version of our program that extends Activity:
</p>
<pre>import sys
import os
import zipfile
import pygtk
import gtk
import pango
from sugar.activity import activity
from sugar.graphics import style

page=0
PAGE_SIZE = 45

class ReadEtextsActivity(activity.Activity):
    def __init__(self, handle):
        "The entry point to the Activity"
        global page
        activity.Activity.__init__(self, handle)

        toolbox = activity.ActivityToolbox(self)
        activity_toolbar = toolbox.get_activity_toolbar()
        activity_toolbar.keep.props.visible = False
        activity_toolbar.share.props.visible = False
        self.set_toolbox(toolbox)

        toolbox.show()
        self.scrolled_window = gtk.ScrolledWindow()
        self.scrolled_window.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
        self.scrolled_window.props.shadow_type = gtk.SHADOW_NONE

        self.textview = gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_cursor_visible(False)
        self.textview.set_left_margin(50)
        self.textview.connect("key_press_event", self.keypress_cb)

        self.scrolled_window.add(self.textview)
        self.set_canvas(self.scrolled_window)
        self.textview.show()
        self.scrolled_window.show()
        page = 0
        self.textview.grab_focus()
        self.font_desc = pango.FontDescription("sans %d" % style.zoom(10))
        self.textview.modify_font(self.font_desc)

    def keypress_cb(self, widget, event):
        "Respond when the user presses one of the arrow keys"
        keyname = gtk.gdk.keyval_name(event.keyval)
        print keyname
        if keyname == 'plus':
            self.font_increase()
            return True
        if keyname == 'minus':
            self.font_decrease()
            return True
        if keyname == 'Page_Up' :
            self.page_previous()
            return True
        if keyname == 'Page_Down':
            self.page_next()
            return True
        if keyname == 'Up' or keyname == 'KP_Up' \
                or keyname == 'KP_Left':
            self.scroll_up()
            return True
        if keyname == 'Down' or keyname == 'KP_Down' \
                or keyname == 'KP_Right':
            self.scroll_down()
            return True
        return False

    def page_previous(self):
        global page
        page=page-1
        if page &lt; 0: page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.upper - v_adjustment.page_size

    def page_next(self):
        global page
        page=page+1
        if page &gt;= len(self.page_index): page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.lower

    def font_decrease(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size - 1
        if font_size &lt; 1:
            font_size = 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def font_increase(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size + 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def scroll_down(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.upper - \
                v_adjustment.page_size:
            self.page_next()
            return
        if v_adjustment.value &lt; v_adjustment.upper - v_adjustment.page_size:
            new_value = v_adjustment.value + v_adjustment.step_increment
            if new_value &gt; v_adjustment.upper - v_adjustment.page_size:
                new_value = v_adjustment.upper - v_adjustment.page_size
            v_adjustment.value = new_value

    def scroll_up(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.lower:
            self.page_previous()
            return
        if v_adjustment.value &gt; v_adjustment.lower:
            new_value = v_adjustment.value - \
                v_adjustment.step_increment
            if new_value &lt; v_adjustment.lower:
                new_value = v_adjustment.lower
            v_adjustment.value = new_value

    def show_page(self, page_number):
        global PAGE_SIZE, current_word
        position = self.page_index[page_number]
        self.etext_file.seek(position)
        linecount = 0
        label_text = '\n\n\n'
        textbuffer = self.textview.get_buffer()
        while linecount &lt; PAGE_SIZE:
            line = self.etext_file.readline()
            label_text = label_text + unicode(line, 'iso-8859-1')
            linecount = linecount + 1
        label_text = label_text + '\n\n\n'
        textbuffer.set_text(label_text)
        self.textview.set_buffer(textbuffer)

    def save_extracted_file(self, zipfile, filename):
        "Extract the file to a temp directory for viewing"
        filebytes = zipfile.read(filename)
        outfn = self.make_new_filename(filename)
        if (outfn == ''):
            return False
        f = open(os.path.join(self.get_activity_root(), 'instance',  outfn),  'w')
        try:
            f.write(filebytes)
        finally:
            f.close

    def read_file(self, filename):
        "Read the Etext file"
        global PAGE_SIZE

        if zipfile.is_zipfile(filename):
            self.zf = zipfile.ZipFile(filename, 'r')
            self.book_files = self.zf.namelist()
            self.save_extracted_file(self.zf, self.book_files[0])
            currentFileName = os.path.join(self.get_activity_root(),\
                'instance',  self.book_files[0])
        else:
            currentFileName = filename

        self.etext_file = open(currentFileName,"r")
        self.page_index = [ 0 ]
        linecount = 0
        while self.etext_file:
            line = self.etext_file.readline()
            if not line:
                break
            linecount = linecount + 1
            if linecount &gt;= PAGE_SIZE:
                position = self.etext_file.tell()
                self.page_index.append(position)
                linecount = 0
        if filename.endswith(".zip"):
            os.remove(currentFileName)
        self.show_page(0)

    def make_new_filename(self, filename):
        partition_tuple = filename.rpartition('/')
        return partition_tuple[2]


</pre>
<p>This program has some significant differences from the standalone version.&nbsp; First, note that this line:
</p>
<pre>#! /usr/bin/env python
</pre>
<p>has been removed.&nbsp; We are no longer running the program directly from the Python interpreter.&nbsp; Now Sugar is running it as an Activity.&nbsp; Notice that much (but not all) of what was in the main() method has been moved to the <em>__init__()</em> method and the <em>main()</em> method has been removed.
</p>
<p>Notice too that the <em>class</em> statement has changed:
</p>
<p>
</p>
<pre>class ReadEtextsActivity(activity.Activity)
</pre>
<p>This statement now tells us that class ReadEtextsActivity extends the class <strong>sugar.activity.Activity</strong>.&nbsp;&nbsp; As a result it inherits the code that is in that class.&nbsp; Therefore we no longer need a GTK main loop, or to define a window.&nbsp; The code in this class we extend will do that for us.
</p>
<p> While we gain much from this inheritance, we lose something too: a title bar for the main window.&nbsp; In a graphical operating environment a piece of software called a <em>window manager</em> is responsible for putting borders on windows, making them resizeable, reducing them to icons, maximizing them, etc.&nbsp; Sugar uses a window manager named Matchbox which makes each window fill the whole screen and puts no border, title bar, or any other window decorations on the windows.&nbsp;&nbsp; As a result of that we can't close our application by clicking on the "X" in the title bar as before.&nbsp; To make up for this we need to have a toolbar that contains a Close button.&nbsp; Thus every Activity has an Activity toolbar that contains some standard controls and buttons.&nbsp; If you look at the code you'll see I'm hiding a couple of controls which we have no use for yet.
</p>
<p>The <em>read_file()</em> method is no longer called from the main() method and doesn't seem to be called from anywhere in the program.&nbsp; Of course it does get called, by some of the Activity code we inherited from our new parent class.&nbsp; Similarly the <em>__init__() </em>and <em>write_file() </em>methods (if we had a <em>write_file()</em> method) get called by the parent Activity class.
</p>
<p>If you're especially observant you might have noticed another change.&nbsp; Our original standalone program created a temporary file when it needed to extract something from a Zip file.&nbsp; It put that file in a directory called /tmp.&nbsp; Our new Activity still creates the file but puts it in a different directory, one specific to the Activity.
  <br />
</p>
<p>Making these changes to the code is not enough to make our program an Activity.&nbsp; We have to do some packaging work and get it set up to run from the Sugar emulator.&nbsp; We also need to learn how to run the Sugar emulator.&nbsp; That comes next!
  <br />
</p><h1>Package The Activity
</h1>
<h2>Add setup.py
</h2>
<p> You'll need to add a Python program called <strong>setup.py</strong> to the same directory that you Activity program is in.&nbsp; Every setup.py is exactly the same as every other setup.py, so you create a file called setup.py in Eric and paste the code below into it.
  <br />
</p>
<pre>#!/usr/bin/env python

# Copyright (C) 2006, Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

from sugar.activity import bundlebuilder

bundlebuilder.start()</pre>
<p>Be sure and copy the entire text above, including the comments.
  <br />
</p>
<p>The setup.py program is used by sugar for a number of purposes.&nbsp; If you run setup.py from the command line you'll see the options that are used with it and what they do.
</p>
<pre>[jim@simmons bookexamples]$ ./setup.py
/usr/lib/python2.6/site-packages/sugar/util.py:25: DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import sha
Available commands:

build                Build generated files
dev                  Setup for development
dist_xo              Create a xo bundle package
dist_source          Create a tar source package
fix_manifest         Add missing files to the manifest
genpot               Generate the gettext pot file
install              Install the activity in the system

(Type "./setup.py &lt;command&gt; --help" for help about a particular command's options.</pre>
<p>We'll be running some of these commands later on.&nbsp; Don't be concerned about the <em>DeprecationWarning</em> message.&nbsp; That is just Python's way of telling us that it has a new way of doing something that is better but the old way we are using still works.&nbsp; The error is coming from code in Sugar itself and should be fixed in some future Sugar release.
  <br />
</p>
<h2>Create activity.info
</h2>
<p> Next create a directory within the one your progam is in and name it <strong>activity</strong>.&nbsp; Create a file named <strong>activity.info</strong> within that directory and copy the lines below into it.
  <br />
</p>
<pre>[Activity]
name = Read ETexts II
service_name = net.flossmanuals.ReadEtextsActivity
icon = read-etexts
exec = sugar-activity ReadEtextsActivity.ReadEtextsActivity
show_launcher = no
activity_version = 1
mime_types = text/plain;application/zip
license = GPLv2+</pre>
<p>This file tell Sugar how to run your Activity.&nbsp; The properties needed in this file are:
</p>
<p>
  <table style="width: 100%;" border="0" cellpadding="4" cellspacing="0"><tbody>
    <tr>
      <td style="width: 25%;">&nbsp;<strong>name</strong></td>
      <td style="width: 75%;">The name of your Activity as it will appear to the user.
      <br /></td>
    </tr>
    <tr>
      <td>&nbsp;<strong>service_name</strong></td>
      <td>A unique name that Sugar will use to refer to your Activity.&nbsp; Any Journal entry created by your Activity will have this name stored in its metadata, so that when someone resumes the Journal entry Sugar knows to use the program that created it to read it.
      <br /></td>
    </tr>
    <tr>
      <td><strong>icon </strong>
      <br /></td>
      <td>The name of the icon file you have created for the Activity.&nbsp; Since icons are always .svg files the icon file in the example is named read-etexts.svg.
      <br /></td>
    </tr>
    <tr>
      <td>&nbsp;<strong>exec</strong></td>
      <td>This tells Sugar how to launch your Activity.&nbsp; What it says is to create an instance of the class <strong>ReadEtextsActivity </strong>which it will find in file <strong>ReadEtextsActivity.py</strong>.
      <br /></td>
    </tr>
    <tr>
      <td>&nbsp;<strong>show_launcher</strong></td>
      <td>There are two ways to launch an Activity.&nbsp; The first is to click on the icon in the Activity view.&nbsp; The second is to resume an entry in the Journal. Activities that don't create Journal entries can only be resumed from the Journal, so there is no point in putting an icon in the Activity ring for them.&nbsp; Read Etexts is an Activity like that.
      <br /></td>
    </tr>
    <tr>
      <td>&nbsp;<strong>activity_version</strong></td>
      <td>An integer that represents the version number of your program.&nbsp; The first version is 1, the next is 2, and so on.
      <br /></td>
    </tr>
    <tr>
      <td>&nbsp;<strong>mime_types</strong></td>
      <td>Generally when you resume a Journal entry it launches the Activity that created it.&nbsp; In the case of an e-book it wasn't created by any Activity, so we need another way to tell the Journal which Activity it can use.&nbsp; A MIME type is the name of a common file format.&nbsp; Some examples are text/plain, text/html, application/zip and application/pdf.&nbsp; In this entry we're telling the Journal that our program can handle either plain text files or Zip archive files.
      <br /></td>
    </tr>
    <tr>
      <td>&nbsp;<strong>license</strong></td>
      <td>Owning a computer program is not like buying a car.&nbsp; With a car, you're the owner and you can do what you like with it.&nbsp; You can sell it, rent it out, make it into a hot rod, whatever.&nbsp; With a computer program there is always a license that tells the person receiving the program what he is allowed to do with it.&nbsp; GPLv2+ is a popular standard license that can be used for Activities, and since this is <em>my</em> program that is what goes here.&nbsp; When you're ready to distribute one of <em>your</em> Activities I'll have more to say about licenses.
      <br /></td>
    </tr></tbody>
  </table>
</p>
<h2>Create An Icon
</h2>
<p> Next we need to create an icon named <strong>read-etexts.svg</strong> and put it in the <strong>activity</strong> subdirectory.&nbsp; We're going to use Inkscape to create the icon.&nbsp; From the <strong>New</strong> menu in Inkscape select <strong>icon_48x48</strong>.&nbsp; This will create a drawing area that is a good size.
</p>
<p>You don't need to be an expert in Inkscape to create an icon.&nbsp; In fact the less fancy your icon is the better.&nbsp; When drawing your icon remember the following points:
</p>
<ul>
  <li>Your icon needs to look good in sizes ranging from really, really small to large.</li>
  <li>It needs to be recognizeable when its really, really small.</li>
  <li>You only get to use two colors: a stroke color and a fill color.&nbsp; It doesn't matter which ones you choose because Sugar will need to override your choices anyway, so just use black strokes on a white background.</li>
  <li>A fill color is only applied to an area that is contained within an unbroken stroke.&nbsp; If you draw a box and one of the corners doesn't quite connect the area inside that box will not be filled.&nbsp; Free hand drawing is only for the talented.&nbsp; Circles, boxes, and arcs are easy to draw with Inkscape so use them when you can.</li>
  <li>Inkscape will also draw 3D boxes using two point perspective.&nbsp; Don't use them.&nbsp; Icons should be flat images.&nbsp; 3D just doesn't look good in an icon.</li>
  <li>Coming up with good ideas for icons is tough.&nbsp; I once came up with a rather nice picture of a library card catalog drawer for <em>Get Internet Archive Books</em>.&nbsp; The problem is, no child under the age of forty has ever seen a card catalog and fewer still understand its purpose.</li>
</ul>
<p>When you're done making your icon you need to modify it so it can work with Sugar.&nbsp; Specifically, you need to make it show Sugar can use its own choice of stroke color and fill color.&nbsp; The SVG file format is based on XML, which means it is a text file with some special tags in it.&nbsp; This means that once we have finished editing it in Inkscape we can load the file into Eric and edit it as a text file.
</p>
<p>I'm not going to put the entire file in this chapter because most of it you'll just leave alone.&nbsp; The first part you need to modify is at the very beginning.
</p>
<p>Before:
</p>
<pre>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;
&lt;svg
</pre>
<p> After:
</p>
<pre>&lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE svg  PUBLIC '-//W3C//DTD SVG 1.1//EN'  'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd' [
	&lt;!ENTITY stroke_color "#000000"&gt;
	&lt;!ENTITY fill_color "#FFFFFF"&gt;
]&gt;&lt;svg
</pre>
<p>Now in the body of the document you'll find references to <em>fill</em> and <em>stroke</em> as part of an attribute called <em>style</em>.&nbsp; Every line or shape you draw will have these, like this:
</p>
<pre>    &lt;rect
       style="fill:#ffffff;stroke:#000000;stroke-opacity:1"
       id="rect904"
       width="36.142857"
       height="32.142857"
       x="4.1428571"
       y="7.1428571" /&gt;</pre>
<p>You need to change each one to look like this:
</p>
<pre>    &lt;rect
       style="fill:&amp;fill_color;;stroke:&amp;stroke_color;;stroke-opacity:1"
       id="rect904"
       width="36.142857"
       height="32.142857"
       x="4.1428571"
       y="7.1428571" /&gt;</pre>
<p>Note that <em>&amp;stroke_color;</em> and <em>&amp;fill_color;</em> both end with semicolons (;), and semicolons are also used to separate the properties for style.&nbsp; Because of this it is an extremely common beginner's mistake to leave off the trailing semicolon because two semicolons in a row don't look right.&nbsp; Be assured that the two semicolons in a row are intentional and absolutely necessary!
</p>
<h2>Make a MANIFEST File
</h2>
<p> You should remember that setup.py has an option to update a manifest.&nbsp; Let's try it:
</p>
<pre>./setup.py fix_manifest
/usr/lib/python2.6/site-packages/sugar/util.py:25: DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import sha
WARNING:root:Missing po/ dir, cannot build_locale
WARNING:root:Activity directory lacks a MANIFEST file.
</pre>
<p>This actually will build a MANIFEST file containing everything in the directory and its subdirectories.&nbsp; The /po directory it is complaining about is used to translate Activities into different languages.&nbsp; We can ignore that for now.
</p>
<p> The MANIFEST file it creates will contain some extra stuff, so we need to get rid of the extra lines using Eric.&nbsp; The corrected MANIFEST should look like this:
</p>
<pre>setup.py
ReadEtextsActivity.py
activity/read-etexts.svg
activity/activity.info</pre>
<h2>Install The Activity
</h2>
<p> There's just one more thing to do before we can test our Activity under the Sugar emulator.&nbsp; We need to install it, which in this case means making a symbolic link between the directory we're using for our code in the ~/Activities/ directory.&nbsp; The symbol ~ refers to the "home" directory of the user we're running Sugar under, and a symbolic link is a way to make a file or directory appear to be located in more than one place without copying it.&nbsp; We make this symbolic link by running setup.py again:
</p>
<pre>./setup.py dev
</pre>
<h2>Running Our Activity
</h2>
<p>Now at last we can run our Activity under Sugar.&nbsp; To do that we need to lear how to run the Sugar emulator.
</p>
<p>Fedora doesn't make a menu option for Sugar Emulator, but it's easy to add one yourself.&nbsp; The command to run is simply
</p>
<pre>sugar-emulator</pre>
<p>If your screen resolution is smaller than the default size sugar-emulator runs at it will run full screen.&nbsp; This is not convenient for testing, so you may want to specify your own size:
</p>
<pre>sugar-emulator -i 800x600</pre>
<p>Note that this option only exists in Fedora 11 and later.
</p>
<p>When you run sugar-emulator a window opens up and the Sugar environment starts up and runs inside it.&nbsp; It looks like this:
</p>
<p><img alt="ReadEtexts_02.jpg" src="/floss/pub/ActivitiesGuideSugar/ReadEtexts_02.jpg" height="480" width="640" />
</p>
<p>There are a couple of other tricks we can do with sugar-emulator.&nbsp; For example we can simulate multiple Sugar users on a network by running a second instance of Sugar with this command line:
</p>
<pre>SUGAR_PROFILE=<em>some_name</em> sugar-emulator
</pre>
<p>We can also tell the emulator we want more detailed logging for debugging purposes.&nbsp; (We haven't used logging code in our Activity yet but we'll get there):
</p>
<pre>SUGAR_LOGGER_LEVEL=debug PRESENSESERVICE_DEBUG=1 sugar-emulator
</pre>
<p>To test our Activity we're going to need to have a book in the Journal, so use the Browse Activity to visit Project Gutenberg again and download the book of your choice.&nbsp; This time it's important to download the book in Zip format, because Browse cannot download a plain text file to the Journal.&nbsp; Instead, it opens the file for viewing as if it was a web page.&nbsp; If you try the same thing with the Zip file it will create an entry in the Journal.
</p>
<p>We can't just open the file with one click in the Journal because our program did not create the Journal entry and there are several Activities that support the MIME type of the Journal entry.&nbsp; We need to use the Start With menu option like this:
</p>
<p><img alt="ReadEtexts_03.jpg" src="/floss/pub/ActivitiesGuideSugar/ReadEtexts_03.jpg" height="480" width="640" />
</p>
<p>When we do open the Journal entry this is what we see:
</p>
<p><img alt="ReadEtexts_04.jpg" src="/floss/pub/ActivitiesGuideSugar/ReadEtexts_04.jpg" height="480" width="640" />
</p>
<p>Technically, this is the first <em>iteration</em> of our Activity.&nbsp; (Iteration is a vastly useful word meaning something you do more than once.&nbsp; In this book we're building our Activity a bit at a time so I can demonstrate Activity writing principles, but actually building a program in pieces, testing it, getting feedback, and building a bit more can be a highly productive way of creating software.&nbsp; Using the word iteration to describe each step in the process makes the process sound more formal than it really is).
</p>
<p>While this Activity might be good enough to show your own mother, we really should improve it a bit before we do that.&nbsp; That part comes next.
  <br />
</p><h1>Adding Refinements
</h1>
<h2>Toolbars
</h2>
<p>It is a truth universally acknowledged that a first rate Activity needs good Toolbars.&nbsp; In this chapter we'll learn how to make them.&nbsp; We're going to put the toolbar classes in a separate file from the rest, because there are two styles of toolbar (old and new) and we may want to support both in our Activity.&nbsp; If we have two different files containing toolbar classes our code can decide at runtime which one it wants to use.&nbsp; For now, this code supports the old style, which works with every version of Sugar.&nbsp; The new style is currently only supported by <em>Sugar on a Stick. </em>
</p>
<p>Add a file to your Eric project called <strong>toolbar.py</strong> and copy this code into it:
</p>
<pre>from gettext import gettext as _
import re

import pango
import gobject
import gtk

from sugar.graphics.toolbutton import ToolButton
from sugar.activity import activity

class ReadToolbar(gtk.Toolbar):
    __gtype_name__ = 'ReadToolbar'

    def __init__(self):
        gtk.Toolbar.__init__(self)

        self.back = ToolButton('go-previous')
        self.back.set_tooltip(_('Back'))
        self.back.props.sensitive = False
        self.insert(self.back, -1)
        self.back.show()

        self.forward = ToolButton('go-next')
        self.forward.set_tooltip(_('Forward'))
        self.forward.props.sensitive = False
        self.insert(self.forward, -1)
        self.forward.show()

        num_page_item = gtk.ToolItem()

        self.num_page_entry = gtk.Entry()
        self.num_page_entry.set_text('0')
        self.num_page_entry.set_alignment(1)
        self.num_page_entry.connect('insert-text',
                                     self.num_page_entry_insert_text_cb)

        self.num_page_entry.set_width_chars(4)

        num_page_item.add(self.num_page_entry)
        self.num_page_entry.show()

        self.insert(num_page_item, -1)
        num_page_item.show()

        total_page_item = gtk.ToolItem()

        self.total_page_label = gtk.Label()

        label_attributes = pango.AttrList()
        label_attributes.insert(pango.AttrSize(14000, 0, -1))
        label_attributes.insert(pango.AttrForeground(65535, 65535, 65535, 0, -1))
        self.total_page_label.set_attributes(label_attributes)

        self.total_page_label.set_text(' / 0')
        total_page_item.add(self.total_page_label)
        self.total_page_label.show()

        self.insert(total_page_item, -1)
        total_page_item.show()

    def num_page_entry_insert_text_cb(self, entry, text, length, position):
        if not re.match('[0-9]', text):
            entry.emit_stop_by_name('insert-text')
            return True
        return False

    def update_nav_buttons(self):
        current_page = self.current_page
        self.back.props.sensitive = current_page &gt; 0
        self.forward.props.sensitive = \
            current_page &lt; self.total_pages - 1

        self.num_page_entry.props.text = str(current_page + 1)
        self.total_page_label.props.label = \
            ' / ' + str(self.total_pages)

    def set_total_pages(self, pages):
        self.total_pages = pages

    def set_current_page(self, page):
        self.current_page = page
        self.update_nav_buttons()

class ViewToolbar(gtk.Toolbar):
    __gtype_name__ = 'ViewToolbar'

    __gsignals__ = {
        'needs-update-size': (gobject.SIGNAL_RUN_FIRST,
                              gobject.TYPE_NONE,
                              ([])),
        'go-fullscreen': (gobject.SIGNAL_RUN_FIRST,
                          gobject.TYPE_NONE,
                          ([]))
    }

    def __init__(self):
        gtk.Toolbar.__init__(self)
        self.zoom_out = ToolButton('zoom-out')
        self.zoom_out.set_tooltip(_('Zoom out'))
        self.insert(self.zoom_out, -1)
        self.zoom_out.show()

        self.zoom_in = ToolButton('zoom-in')
        self.zoom_in.set_tooltip(_('Zoom in'))
        self.insert(self.zoom_in, -1)
        self.zoom_in.show()

        spacer = gtk.SeparatorToolItem()
        spacer.props.draw = False
        self.insert(spacer, -1)
        spacer.show()

        self.fullscreen = ToolButton('view-fullscreen')
        self.fullscreen.set_tooltip(_('Fullscreen'))
        self.fullscreen.connect('clicked', self.fullscreen_cb)
        self.insert(self.fullscreen, -1)
        self.fullscreen.show()

    def fullscreen_cb(self, button):
        self.emit('go-fullscreen')
</pre>
<p>Create another file in the project named <strong>ReadEtextsActivity2.py</strong> and copy this code into it:
</p>
<pre>import sys
import os
import zipfile
import pygtk
import gtk
import pango
from sugar.activity import activity
from sugar.graphics import style
from toolbar import ReadToolbar, ViewToolbar
from gettext import gettext as _

page=0
PAGE_SIZE = 45
TOOLBAR_READ = 2

class ReadEtextsActivity(activity.Activity):
    def __init__(self, handle):
        "The entry point to the Activity"
        global page
        activity.Activity.__init__(self, handle)

        toolbox = activity.ActivityToolbox(self)
        activity_toolbar = toolbox.get_activity_toolbar()
        activity_toolbar.keep.props.visible = False
        activity_toolbar.share.props.visible = False

        self.edit_toolbar = activity.EditToolbar()
        self.edit_toolbar.undo.props.visible = False
        self.edit_toolbar.redo.props.visible = False
        self.edit_toolbar.separator.props.visible = False
        self.edit_toolbar.copy.set_sensitive(False)
        self.edit_toolbar.copy.connect('clicked', self.edit_toolbar_copy_cb)
        self.edit_toolbar.paste.props.visible = False
        toolbox.add_toolbar(_('Edit'), self.edit_toolbar)
        self.edit_toolbar.show()

        self.read_toolbar = ReadToolbar()
        toolbox.add_toolbar(_('Read'), self.read_toolbar)
        self.read_toolbar.back.connect('clicked', self.go_back_cb)
        self.read_toolbar.forward.connect('clicked', self.go_forward_cb)
        self.read_toolbar.num_page_entry.connect('activate', \
                                     self.num_page_entry_activate_cb)
        self.read_toolbar.show()

        self.view_toolbar = ViewToolbar()
        toolbox.add_toolbar(_('View'), self.view_toolbar)
        self.view_toolbar.connect('go-fullscreen',
                self.view_toolbar_go_fullscreen_cb)
        self.view_toolbar.zoom_in.connect('clicked', self.zoom_in_cb)
        self.view_toolbar.zoom_out.connect('clicked', self.zoom_out_cb)
        self.view_toolbar.show()

        self.set_toolbox(toolbox)
        toolbox.show()
        self.scrolled_window = gtk.ScrolledWindow()
        self.scrolled_window.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
        self.scrolled_window.props.shadow_type = gtk.SHADOW_NONE

        self.textview = gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_cursor_visible(False)
        self.textview.set_left_margin(50)
        self.textview.connect("key_press_event", self.keypress_cb)

        self.scrolled_window.add(self.textview)
        self.set_canvas(self.scrolled_window)
        self.textview.show()
        self.scrolled_window.show()
        page = 0
        self.clipboard = gtk.Clipboard(display=gtk.gdk.display_get_default(), \
                                       selection="CLIPBOARD")
        self.textview.grab_focus()
        self.font_desc = pango.FontDescription("sans %d" % style.zoom(10))
        self.textview.modify_font(self.font_desc)

        buffer = self.textview.get_buffer()
        self.markset_id = buffer.connect("mark-set", self.mark_set_cb)
        self.toolbox.set_current_toolbar(TOOLBAR_READ)

    def keypress_cb(self, widget, event):
        "Respond when the user presses one of the arrow keys"
        keyname = gtk.gdk.keyval_name(event.keyval)
        print keyname
        if keyname == 'plus':
            self.font_increase()
            return True
        if keyname == 'minus':
            self.font_decrease()
            return True
        if keyname == 'Page_Up' :
            self.page_previous()
            return True
        if keyname == 'Page_Down':
            self.page_next()
            return True
        if keyname == 'Up' or keyname == 'KP_Up' \
                or keyname == 'KP_Left':
            self.scroll_up()
            return True
        if keyname == 'Down' or keyname == 'KP_Down' \
                or keyname == 'KP_Right':
            self.scroll_down()
            return True
        return False

    def num_page_entry_activate_cb(self, entry):
        global page
        if entry.props.text:
            new_page = int(entry.props.text) - 1
        else:
            new_page = 0

        if new_page &gt;= self.read_toolbar.total_pages:
            new_page = self.read_toolbar.total_pages - 1
        elif new_page &lt; 0:
            new_page = 0

        self.read_toolbar.current_page = new_page
        self.read_toolbar.set_current_page(new_page)
        self.show_page(new_page)
        entry.props.text = str(new_page + 1)
        self.read_toolbar.update_nav_buttons()
        page = new_page

    def go_back_cb(self, button):
        self.page_previous()

    def go_forward_cb(self, button):
        self.page_next()

    def page_previous(self):
        global page
        page=page-1
        if page &lt; 0: page=0
        self.read_toolbar.set_current_page(page)
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.upper - v_adjustment.page_size

    def page_next(self):
        global page
        page=page+1
        if page &gt;= len(self.page_index): page=0
        self.read_toolbar.set_current_page(page)
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.lower

    def zoom_in_cb(self,  button):
        self.font_increase()

    def zoom_out_cb(self,  button):
        self.font_decrease()

    def font_decrease(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size - 1
        if font_size &lt; 1:
            font_size = 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def font_increase(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size + 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def mark_set_cb(self, textbuffer, iter, textmark):

        if textbuffer.get_has_selection():
            begin, end = textbuffer.get_selection_bounds()
            self.edit_toolbar.copy.set_sensitive(True)
        else:
            self.edit_toolbar.copy.set_sensitive(False)

    def edit_toolbar_copy_cb(self, button):
        textbuffer = self.textview.get_buffer()
        begin, end = textbuffer.get_selection_bounds()
        copy_text = textbuffer.get_text(begin, end)
        self.clipboard.set_text(copy_text)

    def view_toolbar_go_fullscreen_cb(self, view_toolbar):
        self.fullscreen()

    def scroll_down(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.upper - \
                v_adjustment.page_size:
            self.page_next()
            return
        if v_adjustment.value &lt; v_adjustment.upper - \
                v_adjustment.page_size:
            new_value = v_adjustment.value + v_adjustment.step_increment
            if new_value &gt; v_adjustment.upper - v_adjustment.page_size:
                new_value = v_adjustment.upper - v_adjustment.page_size
            v_adjustment.value = new_value

    def scroll_up(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.lower:
            self.page_previous()
            return
        if v_adjustment.value &gt; v_adjustment.lower:
            new_value = v_adjustment.value - \
                v_adjustment.step_increment
            if new_value &lt; v_adjustment.lower:
                new_value = v_adjustment.lower
            v_adjustment.value = new_value

    def show_page(self, page_number):
        global PAGE_SIZE, current_word
        position = self.page_index[page_number]
        self.etext_file.seek(position)
        linecount = 0
        label_text = '\n\n\n'
        textbuffer = self.textview.get_buffer()
        while linecount &lt; PAGE_SIZE:
            line = self.etext_file.readline()
            label_text = label_text + unicode(line, 'iso-8859-1')
            linecount = linecount + 1
        label_text = label_text + '\n\n\n'
        textbuffer.set_text(label_text)
        self.textview.set_buffer(textbuffer)

    def save_extracted_file(self, zipfile, filename):
        "Extract the file to a temp directory for viewing"
        filebytes = zipfile.read(filename)
        outfn = self.make_new_filename(filename)
        if (outfn == ''):
            return False
        f = open(os.path.join(self.get_activity_root(), 'tmp',  outfn),  'w')
        try:
            f.write(filebytes)
        finally:
            f.close

    def get_saved_page_number(self):
        global page
        title = self.metadata.get('title', '')
        if title == ''  or not title[len(title)- 1].isdigit():
            page = 0
        else:
            i = len(title) - 1
            newPage = ''
            while (title[i].isdigit() and i &gt; 0):
                newPage = title[i] + newPage
                i = i - 1
            if title[i] == 'P':
                page = int(newPage) - 1
            else:
                # not a page number; maybe a volume number.
                page = 0

    def save_page_number(self):
        global page
        title = self.metadata.get('title', '')
        if title == ''  or not title[len(title)- 1].isdigit():
            title = title + ' P' +  str(page + 1)
        else:
            i = len(title) - 1
            while (title[i].isdigit() and i &gt; 0):
                i = i - 1
            if title[i] == 'P':
                title = title[0:i] + 'P' + str(page + 1)
            else:
                title = title + ' P' + str(page + 1)
        self.metadata['title'] = title

    def read_file(self, filename):
        "Read the Etext file"
        global PAGE_SIZE,  page

        if zipfile.is_zipfile(filename):
            self.zf = zipfile.ZipFile(filename, 'r')
            self.book_files = self.zf.namelist()
            self.save_extracted_file(self.zf, self.book_files[0])
            currentFileName = os.path.join(self.get_activity_root(), \
                    'tmp',  self.book_files[0])
        else:
            currentFileName = filename

        self.etext_file = open(currentFileName,"r")
        self.page_index = [ 0 ]
        pagecount = 0
        linecount = 0
        while self.etext_file:
            line = self.etext_file.readline()
            if not line:
                break
            linecount = linecount + 1
            if linecount &gt;= PAGE_SIZE:
                position = self.etext_file.tell()
                self.page_index.append(position)
                linecount = 0
                pagecount = pagecount + 1
        if filename.endswith(".zip"):
            os.remove(currentFileName)
        self.get_saved_page_number()
        self.show_page(page)
        self.read_toolbar.set_total_pages(pagecount + 1)
        self.read_toolbar.set_current_page(page)

    def make_new_filename(self, filename):
        partition_tuple = filename.rpartition('/')
        return partition_tuple[2]

    def write_file(self, filename):
        "Save meta data for the file."
        self.metadata['activity'] = self.get_bundle_id()
        self.save_page_number()
</pre>
<p>Before you can run this example you'll need to change <strong>activity.info</strong> too:
</p>
<pre>[Activity]
name = Read ETexts II
service_name = net.flossmanuals.ReadEtextsActivity
icon = read-etexts
<strong>exec = sugar-activity ReadEtextsActivity2.ReadEtextsActivity</strong>
show_launcher = no
activity_version = 1
mime_types = text/plain;application/zip
license = GPLv2+

</pre>
<p>The line in <strong>bold</strong> is the only one that needs changing.&nbsp; When we run this new version this is what we'll see:
</p>
<p><img alt="ReadEtexts_05.jpg" src="/floss/pub/ActivitiesGuideSugar/ReadEtexts_05.jpg" height="480" width="640" />
</p>
<p>There are a few things worth pointing out in this code.&nbsp; First, have a look at this import:
</p>
<pre>from gettext import gettext as _
</pre>
<p> We'll be using the <em>gettext</em> module of Python to support translating our Activity into other languages. We'll be using it in statements like this one:
</p>
<pre>        self.back.set_tooltip(_('Back'))</pre>
<p>The underscore acts the same way as the gettext function because of the way we imported gettext.&nbsp; The effect of this statement will be to look in a special translation file for a word or phrase that matches the key "Back" and replace it with its translation.&nbsp; If there is no translation file for the language we want then it will simply use the word "Back".&nbsp; We'll explore setting up these translation files later, but for now using gettext for all of the words and phrases we will show to our Activity users lays some important groundwork.
</p>
<p>The second thing worth pointing out is that while our revised Activity has four toolbars we only had to create two of them.&nbsp; The other two, <strong>Activity</strong> and <strong>Edit</strong>, are part of the Sugar Python library.&nbsp; We can use those toolbars as is, hide the controls we don't need, or even extend them by adding new controls.&nbsp; In the example we're hiding the <strong>Keep</strong> and <strong>Share</strong> controls of the Activity toolbar and the <strong>Undo</strong>, <strong>Redo</strong>, and <strong>Paste</strong> buttons of the Edit toolbar.&nbsp; We currently do not support sharing books or modifying the text in books so these controls are not needed.&nbsp; Note too that the Activity toolbar is part of the <strong>ActivityToolbox</strong>.&nbsp; There is no way to give your Activity a toolbox that does not contain the Activity toolbar as its first entry.
</p>
<p>Another thing to notice is that the Activity class doesn't just provide us with a window.&nbsp; The window has a VBox to hold our toolbars and the body of our Activity.&nbsp; We install the toolbox using <em>set_toolbox()</em> and the body of the Activity using <em>set_canvas()</em>.
</p>
<p>The <strong>Read</strong> and <strong>View</strong> toolbars are regular PyGtk programming, but notice that there is a special button for Sugar toolbars that can have a tooltip attached to it, plus the <strong>View</strong> toolbar has code to hide the toolbox and <strong>ReadEtextsActivity2</strong> has code to unhide it.&nbsp; This is an easy function to add to your own Activities and many games and other kinds of Activities can benefit from the increased screen area you get when you hide the toolbox.
</p>
<h2>MetadataAnd Journal Entries
  <br />
</h2>
<p>Every Journal entry represents a single file plus metadata, or information describing the file.&nbsp; There are standard metadata entries that all Journal entries have and you can also create your own custom metadata.
</p>
<p> Unlike ReadEtextsActivity, this version has a <em>write_file()</em> method.
</p>
<pre>    def write_file(self, filename):
        "Save meta data for the file."
        self.metadata['activity'] = self.get_bundle_id()
        self.save_page_number()
</pre>
<p> We didn't have a <em>write_file()</em> method before because we weren't going to update the file the book is in, and we still aren't.&nbsp; We will, however, be updating the metadata for the Journal entry.&nbsp; Specifically, we'll be doing two things:
</p>
<ul>
  <li>Save the page number our Activity user stopped reading on so when he launches the Activity again we can return to that page.</li>
  <li>Tell the Journal entry that it belongs to our Activity, so that in the future it will use our Activity's icon and can launch our Activity with one click.</li>
</ul>
<p>The way the <strong>Read</strong> Activity saves page number is to use a custom metadata property.&nbsp;
</p>
<pre>            self.metadata['Read_current_page'] = \
                        str(self._document.get_page_cache().get_current_page())
</pre>
<p><strong>Read</strong> creates a custom metadata property named <em>Read_current_page </em>to store the current page number.&nbsp; You can create any number of custom metadata properties just this easily, so you may wonder why we aren't doing that with <strong>Read Etexts</strong>.&nbsp; Actually, the first version of <strong>Read Etexts</strong> did use a custom property, but in Sugar .82 or lower there was a bug in the Journal such that custom metadata did not survive after the computer was turned off.&nbsp; As a result my Activity would remember pages numbers while the computer was running, but would forget them as soon as it was shut down.&nbsp; XO laptops currently cannot upgrade to anything newer than .82, and when it is possible to upgrade it will be a big job for the schools.
</p>
<p>To get around this problem I created the following two methods:
  <br />
</p>
<pre>    def get_saved_page_number(self):
        global page
        title = self.metadata.get('title', '')
        if title == ''  or not title[len(title)- 1].isdigit():
            page = 0
        else:
            i = len(title) - 1
            newPage = ''
            while (title[i].isdigit() and i &gt; 0):
                newPage = title[i] + newPage
                i = i - 1
            if title[i] == 'P':
                page = int(newPage) - 1
            else:
                # not a page number; maybe a volume number.
                page = 0

    def save_page_number(self):
        global page
        title = self.metadata.get('title', '')
        if title == ''  or not title[len(title)- 1].isdigit():
            title = title + ' P' +  str(page + 1)
        else:
            i = len(title) - 1
            while (title[i].isdigit() and i &gt; 0):
                i = i - 1
            if title[i] == 'P':
                title = title[0:i] + 'P' + str(page + 1)
            else:
                title = title + ' P' + str(page + 1)
        self.metadata['title'] = title
</pre>
<p> <em>save_page_number()</em> looks at the current title metadata and either adds a page number to the end of it or updates the page number already there.&nbsp; Since title is standard metadata for all Journal entries the Journal bug does not affect it.
</p>
<p>These examples show how to read metadata too. &nbsp;
  <br />
</p>
<pre>        title = self.metadata.get('title', '')
</pre>
<p> This line of code says "Get the metadata property named <em>title</em> and put it in the variable named <em>title</em>, If there is no title property put an empty string in <em>title</em>.
</p>
<p>Generally&nbsp; you will save metadata in the <em>write_file()</em> method and read it in the <em>read_file()</em> method.
</p>
<p>In a normal Activity that writes out a file in write_file() this next line would be unnecessary:
</p>
<p>
</p>
<pre>        self.metadata['activity'] = self.get_bundle_id()
</pre>
<p> Any Journal entry created by an Activity will automatically have this property set. In the case of <em>Pride and Prejudice</em>, our Activity did not create it.&nbsp; We are able to read it because our Activity supports its <em>MIME type</em>.&nbsp; Unfortunately, that MIME type, <em>application/zip</em>, is used by other Activities.&nbsp; I found it very frustrating to want to open a book in <strong>Read Etexts</strong> and accidentally have it opened in <strong>EToys</strong> instead.&nbsp; This line of code solves that problem.&nbsp; You only need to use <em>Start Using...</em> the first time you read a book.&nbsp; After that the book will use the <strong>Read Etexts</strong> icon and can be resumed with a single click.
</p>
<p>This does not at all affect the MIME type of the Journal entry, so if you wanted to deliberately open <em>Pride and Prejudice</em> with <strong>Etoys</strong> it is still possible.
</p>
<p>Before we leave the subject of Journal metadata let's look at all the standard metadata that every Activity has.&nbsp; Here is some code that creates a new Journal entry and updates a bunch of standard properties:
</p>
<pre>    def create_journal_entry(self,  tempfile):
        journal_entry = datastore.create()
        journal_title = self.selected_title
        if self.selected_volume != '':
            journal_title +=  ' ' + _('Volume') + ' ' +  self.selected_volume
        if self.selected_author != '':
            journal_title = journal_title  + ', by ' + self.selected_author
        journal_entry.metadata['title'] = journal_title
        journal_entry.metadata['title_set_by_user'] = '1'
        journal_entry.metadata['keep'] = '0'
        format = self._books_toolbar.format_combo.props.value
        if format == '.djvu':
            journal_entry.metadata['mime_type'] = 'image/vnd.djvu'
        if format == '.pdf' or format == '_bw.pdf':
            journal_entry.metadata['mime_type'] = 'application/pdf'
        journal_entry.metadata['buddies'] = ''
        journal_entry.metadata['preview'] = ''
        journal_entry.metadata['icon-color'] = profile.get_color().to_string()
        textbuffer = self.textview.get_buffer()
        journal_entry.metadata['description'] = \
            textbuffer.get_text(textbuffer.get_start_iter(), \
            textbuffer.get_end_iter())
        journal_entry.file_path = tempfile
        datastore.write(journal_entry)
        os.remove(tempfile)
        self._alert(_('Success'), self.selected_title + _(' added to Journal.'))
</pre>
<p>This code is taken from an Activity I wrote that downloads books from a website and creates Journal entries for them.&nbsp; The Journal entries contain a friendly title and a full description of the book.
</p>
<p>Most Activities will only deal with one Journal entry by using the <em>read_file()</em> and <em>write_file()</em> methods but you are not limited to that.&nbsp; You can create new Journal entries using code like this example, and you can also list out and read any entries in the Journal. Here is some code to list out image files that have Journal entries:
</p>
<pre>    def load_journal_table(self):
        ds_objects, num_objects = datastore.find({\
            'mime_type':['image/jpeg',  'image/gif', \
            'image/tiff',  'image/png']})
        for i in xrange (0, num_objects, 1):
            title = ds_objects[i].metadata['title']
            mime_type = ds_objects[i].metadata['mime_type']
            if mime_type == 'image/jpeg' and not title.endswith('.jpg')\
                and not title.endswith('.jpeg')  \
                and not title.endswith('.JPG')  and not title.endswith('.JPEG') :
                title = title + '.jpg'
            if mime_type == 'image/png' and not title.endswith('.png')\
                and not title.endswith('.PNG'):
                title = title + '.png'
            if mime_type == 'image/gif' and not title.endswith('.gif')\
                and not title.endswith('.GIF'):
                title = title + '.gif'
            if mime_type == 'image/tiff' and not title.endswith('.tiff')\
                and not title.endswith('.TIFF'):
                title = title + '.tiff'
            jobject_wrapper = JobjectWrapper()
            jobject_wrapper.set_jobject(ds_objects[i])
<em>            ... add the jobject wrapper to a list here ...</em>

        valid_endings = ('.jpg',  '.jpeg', '.JPEG',  '.JPG', '.gif',\
                '.GIF', '.tiff', '.TIFF', '.png', '.PNG')
        ds_mounts = datastore.mounts()
        if len(ds_mounts) == 1 and ds_mounts[0]['id'] == 1:
            # datastore.mounts() is stubbed out, we're running .84 or better
            for dirname,  dirnames,  filenames in os.walk('/media'):
                if '.olpc.store' in dirnames:
                    dirnames.remove('.olpc.store')
                # don't visit .olpc.store directories
                for filename in filenames:
                    if filename.endswith(valid_endings):
                        jobject_wrapper = JobjectWrapper()
                        jobject_wrapper.set_file_path(os.path.join(\
                            dirname,  filename))
<em>                        ... Add these jobject wrappers to the same list ...</em>
</pre>
<p>If this code seems complicated you should understand that most of this code is needed to give an identical experience under Sugar .82 and later versions.&nbsp; Really the only code you need to list Journal objects is this:
  <br />
</p>
<pre>        ds_objects, num_objects = datastore.find({\
            'mime_type':['image/jpeg',  'image/gif', \
            'image/tiff',  'image/png']})
        for i in xrange (0, num_objects, 1):
            title = ds_objects[i].metadata['title']
            mime_type = ds_objects[i].metadata['mime_type']
</pre>
<p>This code will list out all the image files in an array and you can loop through it and find out what you need to know about those images.&nbsp; When you're ready to read one of those image files you can use code like this to get the path to the file:
</p>
<pre>path = ds_objects[i].get_file_path()
</pre>
<p> It is important to use the <em>get_file_path()</em> method immediately before you read the file.&nbsp; The reason is that the path does not exist before you call <em>get_file_path()</em> and will not exist long afterwards.&nbsp; Remember that Sugar does not let you deal with the Journal directly, in order to prevent malicious Activities from harming each other.&nbsp; Instead you are given paths of files to read and write to and Sugar deals with getting them to and from the Journal.
</p>
<p>So why use the complex code I wrote when something simpler will do the same thing?&nbsp; There are several reasons:
</p>
<ul>
  <li>In Sugar .82 the simpler code will list all image files in your Journal, plus all image files in your SD card if your XO has one, plus any image files in any USB thumb drives you may have mounted.&nbsp; In later versions of Sugar only image files in the Journal proper are listed.&nbsp; I liked the Sugar .82 behavior and this code gives that behavior in all Sugar versions.</li>
  <li>In one of the Sugar versions the title of the Journal entry is just the first part of the filename, without the .gif, .png, or .jpg suffix.&nbsp; I wanted the title to always be the complete filename with suffix so I use the MIME type to figure out what the suffix should be and if it's missing I add it.</li>
</ul>
<p>To make ds objects work the same way as regular files on thumb drives I create a wrapper class to contain both:
</p>
<pre>class JobjectWrapper():
    def __init__(self):
        self.__jobject = None
        self.__file_path = None

    def set_jobject(self,  jobject):
        self.__jobject = jobject

    def set_file_path(self,  file_path):
        self.__file_path = file_path

    def get_file_path(self):
        if  self.__jobject != None:
            return self.__jobject.get_file_path()
        else:
            return self.__file_path
</pre>
<p> As you can see when I read a file on an SD card or a thumb drive I'm reading the actual file using its actual path, not a temporary one.&nbsp; Even so my Activity cannot <em>write</em> to an SD card or a thumb drive.&nbsp; It can only read from them.&nbsp; If you want to export data to a file on a thumb drive the best you can do is to create a Journal entry with the appropriate MIME type.&nbsp; The Activity user can then copy this entry to the thumb drive using the Journal.
</p>
<p>We've covered a lot of technical information in this chapter and there's more to come, but before we get to that we need to look at some other important topics:
</p>
<ul>
  <li>Putting your Activity in version control.&nbsp; This will enable you to share your code with the world and get other people to help work on it.</li>
  <li>Getting your Activity translated into other languages.</li>
  <li>Distributing your finished Activity.&nbsp; (Or your not quite finished but still useful Activity).
  <br /></li>
</ul><h1>Putting Your Activity Code In Version Control
</h1>
<h2>What Is Version Control?
</h2>
<p> <em>"If I have seen further it is only by standing on the shoulders of giants."</em>
</p>
<p>Isaac Newton, in a letter to Robert Hooke.
</p>
<p>Writing an Activity is usually not something you do by yourself.&nbsp; You will usually have collaborators in one form or another.&nbsp; When I started writing <strong>Read Etexts</strong> I copied much of the code from the <strong>Read</strong> Activity.&nbsp; When I implemented text to speech I adapted a toolbar from the <strong>Speak</strong> Activity.&nbsp; When I finally got my copied file sharing code working the author of <strong>Image Viewer</strong> thought it was good enough to copy into that Activity.&nbsp; Another programmer saw the work I did for text to speech and thought he could do it better.&nbsp; He was right, and his improvements got merged into my own code.&nbsp; When I wrote <strong>Get Internet Archive Books</strong> someone else took the user interface I came up with and made a more powerful and versatile Activity called <strong>Get Books</strong>.&nbsp; Like Newton, everyone benefits from the work others have done before.
  <br />
</p>
<p>Even if I wanted to write Activities without help I would still need collaborators to translate them into other languages.
</p>
<p>To make collaboration possible you need to have a place where everyone can post their code and share it.&nbsp; This is called a code repository.&nbsp; It isn't enough to just share the latest version of your code.&nbsp; What you really want to do is share <em>every</em> version of your code.&nbsp; Every time you make a significant change to your code you want to have the new version and the previous version available.&nbsp; Not only do you want to have every version of your code available, you want to be able to compare any two versions your code to see what changed between them.&nbsp; This is what version control software does.
</p>
<p>The three most popular version control tools are <em>CVS</em>, <em>Subversion</em>, and <em>Git</em>.&nbsp; Git is the newest and is the one used by Sugar Labs.&nbsp; While not every Activity has its code into the Sugar Labs Git repository (other free code repositories exist) there is no good reason not to do it and significant benefits if you do.&nbsp; If you want to get your Activity translated into other languages using a Sugar Labs Git repository is a must. &nbsp;
  <br />
</p>
<h2>Git Along Little Dogies
</h2>
<p>Git is a <em>distributed</em> version control system.&nbsp; This means that not only are there copies of every version of your code in a central repository, the same copies exist on every user's computer.&nbsp; This means you can update your local repository while you are not connected to the Internet, then connect and share everything at one time.
</p>
<p> There are two ways you will interact with your Git repository: through Git commands and through the website at <a href="http://git.sugarlabs.org/.">http://git.sugarlabs.org/.</a>&nbsp;&nbsp; We'll look at this website first.
</p>
<p>Go to <a href="http://git.sugarlabs.org">http://git.sugarlabs.org/</a>&nbsp; and click on the <strong>Projects</strong> link in the upper right corner:
</p>
<p><img alt="git1.jpg" src="/floss/pub/ActivitiesGuideSugar/git1.jpg" height="194" width="473" />
</p>
<p>You will see a list of projects in the repository.&nbsp; They will be listed from newest to oldest.&nbsp; You'll also see a <strong>New Project</strong> link but you'll need to create an account to use that and we aren't ready to do that yet.
  <br />
</p>
<p><img alt="git2.jpg" src="/floss/pub/ActivitiesGuideSugar/git2.jpg" height="453" width="535" />
</p>
<p>If you use the <strong>Search</strong> link in the upper right corner of the page you'll get a search form.&nbsp; Use it to search for "read etexts".&nbsp; Click on the link for that project when you find it.&nbsp; You should see something like this:
  <br />
</p>
<p><img alt="git3.jpg" src="/floss/pub/ActivitiesGuideSugar/git3.jpg" height="571" width="571" />
</p>
<p>This page lists <em>some</em> of the activity for the project but I don't find it particularly useful.&nbsp; To get a much better look at your project start by clicking on the repository name on the right side of the page.&nbsp; In this case the repository is named <strong>mainline</strong>.
</p>
<p><img alt="git4.jpg" src="/floss/pub/ActivitiesGuideSugar/git4.jpg" height="236" width="399" />
</p>
<p>You'll see something like this at the top of the page:
</p>
<p><img alt="git5.jpg" src="/floss/pub/ActivitiesGuideSugar/git5.jpg" height="509" width="574" />
</p>
<p>This page has some useful information on it.&nbsp; First, have a look at the <strong>Public clone url</strong> and the <strong>HTTP clone url</strong>.&nbsp; You need to click on <strong>More info...</strong> to see either one.&nbsp; If you run either of these commands from the console you will get a copy of the git repository for the project copied to your computer.&nbsp; This copy will include every version of every piece of code in the project.&nbsp; You would need to modify it a bit before you could share your changes back to the main repository, but everything would be there.
</p>
<p>The list under <strong>Activities</strong> is not that useful, but if you click on the <strong>Source Tree</strong> link you'll see something really good:
</p>
<p><img alt="git6.jpg" src="/floss/pub/ActivitiesGuideSugar/git6.jpg" height="468" width="571" />
</p>
<p>Here is a list of every file in the project, the date it was last updated, and a comment on what was modified.&nbsp; Click on the link for <strong>ReadEtextsActivity.py</strong> and you'll see this:
</p>
<p><img alt="git7.jpg" src="/floss/pub/ActivitiesGuideSugar/git7.jpg" height="642" width="597" />
</p>
<p>This is the latest code in that file in pretty print format.&nbsp; Python keywords are shown in a different color, there are line numbers, etc.&nbsp; This is a good page for looking at code on the screen, but it doesn't print well and it's not much good for copying snippets of code into Eric windows either.&nbsp; For either of those things you'll want to click on <strong>raw blob data</strong> at the top of the listing:
</p>
<p><img alt="git8.jpg" src="/floss/pub/ActivitiesGuideSugar/git8.jpg" height="484" width="549" />
</p>
<p>We're not done yet.&nbsp; Use the <strong>Back</strong> button to get back to the pretty print listing and click on the <strong>Commits</strong> link.&nbsp; This will give us a list of everything that changed each time we committed code into Git:
</p>
<p><img alt="git9.jpg" src="/floss/pub/ActivitiesGuideSugar/git9.jpg" height="540" width="636" />
</p>
<p>You may have noticed the odd combination of letters and numbers after the words <strong>James Simmons committed</strong>.&nbsp; This is a kind of version number.&nbsp; The usual practice with version control systems is to give each version of code you check in a version number, usually a simple sequence number.&nbsp; Git is distributed, with many separate copies of the repository being modified independently and then merged.&nbsp; That makes using just a sequential number to identify versions unworkable.&nbsp; Instead, Git gives each version a really, really large random number.&nbsp; The number is expressed in base 16, which uses the symbols 0-9 and a-f.&nbsp; What you see in green is only a small part of the complete number.&nbsp; The number is a link, and if you click on it you'll see this:
</p>
<p><img alt="git10.jpg" src="/floss/pub/ActivitiesGuideSugar/git10.jpg" height="607" width="561" />
</p>
<p>At the top of the page we see the complete version number used for this commit.&nbsp; Below the gray box we see the full comment that was used to commit the changes.&nbsp; Below that is a listing of what files were changed.&nbsp;&nbsp; If we look further down the page we see this:
</p>
<p><img alt="git11_1.jpg" src="/floss/pub/ActivitiesGuideSugar/git11_1.jpg" height="530" width="581" />
</p>
<p>This is a <em>diff</em> report which shows the lines that have changed between this version and the previous version.&nbsp; For each change it shows a few lines before and after the change to give you a better idea of what the change does.&nbsp; Every change shows line numbers too.
</p>
<p>A report like this is a wonderful aid to programming.&nbsp; Sometimes when you're working on an enhancement to your program something that had been working mysteriously stops working.&nbsp; When that happens you will wonder just what you changed that could have caused the problem.&nbsp; A diff report can help you find the source of the problem.
</p>
<p>By now you must be convinced that you want your project code in Git.&nbsp; Before we can do that we need to create an account on this website.&nbsp; That is no more difficult than creating an account on any other website, but it will need an important piece of information from us that we don't have yet.&nbsp; Getting that information is our next task.
</p>
<h2>Setting Up SSH Keys
</h2>
<p>To send your code to the gitorious code repository you need an SSH public/private key pair.&nbsp; SSH is a way of sending data over the network in encrypted format.&nbsp; (In other words, it uses a secret code so nobody but the person getting the data can read it).&nbsp; Public/private key encryption is a way of encrypting data that provides a way to guarantee that the person who is sending you the data is who he claims to be.
</p>
<p>In simple terms it works like this: the SSH software generates two very large numbers that are used to encode and decode the data going over the network.&nbsp; The first number, called the <em>private key</em>, is kept secret and is only used by you to encode the data.&nbsp; The second number, called the <em>public key</em>, is given to anyone who needs to decode your data.&nbsp; He can decode it using the public key; there is no need for him to know the private key.&nbsp; He can also use the public key to encode a message to send back to you and you can decode it using your private key.
</p>
<p>Git uses SSH like an electronic signature to verify that code changes that are supposed to be coming from you actually are coming from you.&nbsp; The Git repository is given your public key.&nbsp; It knows that anything it decodes with that key must have been sent by you because only you have the private key needed to encode it.
</p>
<p> We will be using a tool called <strong>OpenSSH</strong> to generate the public and private keys.&nbsp; This is included with every version of Linux so you just need to verify that it has been installed.&nbsp; Then use the <strong>ssh-keygen</strong> utility that comes with OpenSSH to generate the keys:
  <br />
</p>
<pre>[jim@olpc2 ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/jim/.ssh/id_rsa): </pre>
<p>By default ssh-keygen generates an <strong>RSA</strong> key, which is the kind we want.&nbsp; By default it puts the keyfiles in a directory called <strong>/<em>yourhome</em>/.ssh</strong> and we want that too, so DO NOT enter a filename when it asks you to.&nbsp; Just hit the <strong>Enter</strong> key to continue.
</p>
<pre>[jim@olpc2 ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/jim/.ssh/id_rsa):
Created directory '/home/jim/.ssh'.
Enter passphrase (empty for no passphrase):
</pre>
<p>Now we DO want a passphrase here.&nbsp; A passphrase is like a password that is used with the public and private keys to do the encrypting.&nbsp; When you type it in you will not be able to see what you typed.&nbsp; Because of that it will ask you to type the same thing again, and it will check to see that you typed them in the same way both times.
</p>
<pre>[jim@olpc2 ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/jim/.ssh/id_rsa):
Created directory '/home/jim/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/jim/.ssh/id_rsa.
Your public key has been saved in /home/jim/.ssh/id_rsa.pub.
The key fingerprint is:
d0:fe:c0:0c:1e:72:56:7a:19:cd:f3:85:c7:4c:9e:18 jim@olpc2.simmons
The key's randomart image is:
+--[ RSA 2048]----+
|        oo  E=.  |
|       + o+ .+=. |
|    . B +  o.oo  |
|     = O    .    |
|      . S        |
|         o       |
|          .      |
|                 |
|                 |
+-----------------+
</pre>
<p> When choosing a passphrase remember that it needs to be something you can type reliably without seeing it and it would be better if it was <em>not</em> a word you can find in the dictionary, because those are easily broken. When I need to make a password I use the tool at <a href="http://www.multicians.org/thvv/gpw.html.">http://www.multicians.org/thvv/gpw.html.</a>&nbsp; This tool generates a bunch of nonsense words that are pronounceable.&nbsp; Pick one that appeals to you and use that.
</p>
<p>Now have a look inside the .ssh directory.&nbsp; By convention every file or directory name that begins with a period is considered hidden by Linux, so it won't show up in a GNOME file browser window unless you use the option on the View menu to Show Hidden Files.&nbsp; When you display the contents of that directory you'll see two files: <strong>id_rsa</strong> and <strong>id_rsa.pub</strong>.&nbsp; The public key is in id_rsa.pub.&nbsp; Try opening that file with gedit (Open With Text Editor) and you'll see this:
</p>
<p><img alt="git12.jpg" src="/floss/pub/ActivitiesGuideSugar/git12.jpg" height="278" width="640" />
</p>
<p>When you create your account on <a href="http://git.sugarlabs.org">git.sugarlabs.org</a> there will be a place where you can add your public SSH key.&nbsp; To do that use Select All from the Edit menu in gedit, then Copy and Paste into the field provided on the web form.
</p>
<h2>Create A New Project
</h2>
<p>I'm going to create a new Project in Git for the examples for this book.&nbsp; I need to log in with my new account and click the <strong>New Project</strong> link we saw earlier.&nbsp; I get this form, which I have started filling in:
</p>
<p><img alt="git13.jpg" src="/floss/pub/ActivitiesGuideSugar/git13.jpg" height="343" width="398" />
</p>
<p>The <strong>Title</strong> is used on the website, the <strong>Slug</strong> is a shortened version of the title without spaces used to name the Git repository.&nbsp; <strong>Categories</strong> are optional.&nbsp; <strong>License</strong> is GPL v2 for my projects.&nbsp; You can choose from any of the licenses in the list for your own Projects, and you can change the license entry later if you want to.&nbsp; You will also need to enter a <strong>Description</strong> for your project.
</p>
<p>Once you have this set up you'll be able to click on the mainline entry for the Project (like we did with Read Etexts before) and see something like this:
</p>
<p><img alt="git14.jpg" src="/floss/pub/ActivitiesGuideSugar/git14.jpg" height="454" width="640" />
</p>
<p>The next step is to convert our project files into a local Git repository, add the files to it, then push it to the repository on <a href="http://git.sugarlabs.org">git.sugarlabs.org.</a>&nbsp; We need to do this because you cannot clone an empty repository, and our remote repository is currently empty.&nbsp; To get around that problem we'll push the local repository out to the new remote repository we just created, then clone the remote one and delete our existing project and its Git repository.&nbsp; From then on we'll do all our work in the cloned repository.
  <br />
</p>
<p>This process may remind you of the Edward Albee quote, "<span class="body">Sometimes a person has to go a very long distance out of his way to come back a short distance correctly".</span> Fortunately we only need to do it once per project.&nbsp; Enter the commands shown below in <strong>bold</strong> after making you project directory the current one:
  <br />
</p>
<pre><strong>git init</strong>
Initialized empty Git repository in /home/jim/olpc/bookexamples/.git/
<strong>git add *.py</strong>
<strong>git add activity
git add MANIFEST</strong>
<strong>git add .gitignore
git commit -a -m "Create repository and load"</strong>
[master (root-commit) 727bfe8] Create repository and load
 9 files changed, 922 insertions(+), 0 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 MANIFEST
 create mode 100755 ReadEtexts.py
 create mode 100644 ReadEtextsActivity.py
 create mode 100644 ReadEtextsActivity2.py
 create mode 100644 activity/activity.info
 create mode 100644 activity/read-etexts.svg
 create mode 100755 setup.py
 create mode 100644 toolbar.py
</pre>
<p> I have made an empty local Git repository with <strong>git init</strong>, then I've used <strong>git add</strong> to add the important files to it.&nbsp; (In fact <strong>git add</strong> doesn't actually add anything itself; it just tells Git to add the file on the next <strong>git commit</strong>).&nbsp; Finally <strong>git commit</strong> with the options shown will actually put the latest version of these files in my new local repository.
</p>
<p>To push this local repository to <a href="http://git.sugarlabs.org">git.sugarlabs.org</a>&nbsp; we use the commands from the web page:
</p>
<pre><strong>git remote add origin gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline.git
git push origin master</strong>
Counting objects: 17, done.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (15/15), 7.51 KiB, done.
Total 15 (delta 3), reused 0 (delta 0)
To gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline.git
   2cb3a1e..700789d  master -&gt; master
=&gt; Syncing Gitorious...
Heads up: head of  changed to 700789d3333a7257999d0a69bdcafb840e6adc09 on master
Notify cia.vc of 727bfe819d5b7b70f4f2b31d02f5562709284ac4  on myo-sugar-activities-examples
Notify cia.vc of 700789d3333a7257999d0a69bdcafb840e6adc09  on myo-sugar-activities-examples
[OK]
<strong>rm *</strong>
<strong>rm activity -rf
rm .git -rf</strong>
<strong>cd ~</strong>
<strong>mkdir olpc</strong>
<strong>cd olpc</strong>
<strong>mkdir bookexamples</strong>
<strong>cd bookexamples
git clone git://git.sugarlabs.org/myo-sugar-activities-examples/mainline.git</strong>
Initialized empty Git repository in /home/jim/olpc/bookexamples/mainline/.git/
remote: Counting objects: 18, done.
remote: Compressing objects: 100% (16/16), done.
remote: Total 18 (delta 3), reused 0 (delta 0)
Receiving objects: 100% (18/18), 8.53 KiB, done.
Resolving deltas: 100% (3/3), done.
</pre>
<p> The lines in <strong>bold</strong> are the commands to enter, and everything else is messages that Git sends to the console. It probably isn't clear what we're doing here and why, so let's take it step by step:
</p>
<ul>
  <li>The first command <strong>git remote add origin</strong> tells the remote Git repository that we are going to send it stuff from our local repository.
  <br /></li>
  <li>The second command <strong>git push origin master</strong> actually sends your local Git repository to the remote one and its contents will be copied in.&nbsp; When you enter this command you will be asked to enter the SSH pass phrase you created in the last section.&nbsp; GNOME will remember this phrase for you and enter it for every Git command afterwards so you don't need to.&nbsp; It will keep doing this until you log out or turn off the computer.
  <br /></li>
  <li>The next step is to delete our existing files and our local Git repository (which is contained in the hidden directory .git).&nbsp; The <strong>rm .git -rf</strong> means "Delete the directory .git and everything in it".&nbsp; <strong>rm</strong> is a Unix command, not part of Git.&nbsp; If you like you can delete your existing files <em>after</em> you create the cloned repository in the next step.
  <br /></li>
  <li>Now we do the <strong>git clone</strong> command from the web page.&nbsp; This takes the remote Git repository we just added our MANIFEST file to and makes a new local repository in directory <strong>/<em>yourhome</em>/olpc/bookexamples/mainline.</strong></li>
</ul>
<p>Finally we have a local repository we can use.&nbsp; Well, not quite.&nbsp; We can commit our code to it but we cannot push anything back to the remote repository because our local repository isn't configured correctly yet.
</p>
<p>What we need to do is edit the file <strong>config</strong> in directory <strong>.git</strong> in <strong>/<em>yourhome</em>/olpc/bookexamples/mainline.&nbsp; </strong>We can use gedit to do that.&nbsp; We need to change the <strong>url=</strong> entry to point to the <strong>Push url</strong> shown on the mainline web page.&nbsp; When we're done our <strong>config</strong> file should look like this:
</p>
<pre>[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	<strong>url = gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline.git</strong>
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
</pre>
<p> The line in <strong>bold</strong> is the only one that gets changed.
</p>
<p>From now on anyone who wants to work on our project can get a local copy of the Git repository by doing this from within the directory where he wants the repository to go:
</p>
<p>
</p>
<pre><strong>git clone git://git.sugarlabs.org/myo-sugar-activities-examples/mainline.git</strong></pre>
<p> He'll have to change his <strong>.git/config</strong> file just like we did, then he'll be ready to go.
</p>
<h2>Everyday Use Of Git
</h2>
<p> While getting the repositories set up to begin with is a chore, daily use is not.&nbsp; There are only a few commands you'll need to work with.&nbsp; When we left off we had a repository in <strong>/<em>yourhome</em>/olpc/bookexamples/mainline</strong> with our files in it.&nbsp; We will need to add any new files we create too.
  <br />
</p>
<p>We use the <strong>git add</strong> command to tell Git that we want to use Git to store a particular file.&nbsp; This doesn't actually store anything, it just tells Git our intentions.&nbsp; The format of the command is simply:
</p>
<pre>git add <em>file_or_directory_name</em></pre>
<p>There are files we <em>don't</em> want to add to Git, to begin with those files that end in <strong>.pyc</strong>.&nbsp; If we never do a <strong>git add</strong> on them they'll never get added, but Git will constantly ask us why we aren't adding them.&nbsp; Fortunately there is a way to tell Git that we really, really don't want to add those files.&nbsp; We need to create a file named <strong>.gitignore</strong> using gedit and put in entries like this:
</p>
<pre>*.pyc
*.e4p
*.zip
.eric4project/
.ropeproject/</pre>
<p>These entries will also ignore project files used by Eric and zip files containing ebooks,&nbsp; Once we have this file created in the mainline directory we can add it to the repository:
</p>
<pre>git add .gitignore
git commit -a -m "Add .gitignore file"
</pre>
<p>From now on Git will no longer ask us to add .pyc or other unwanted&nbsp; files that match our patterns. If there are other files we don't want in the repository we can add them to .gitignore either as full file names or directory names or as patterns like *.pyc.
</p>
<p>&nbsp;In addition to adding files to Git we can remove them too:
</p>
<pre>git rm <em>filename</em></pre>
<p>Note that this just tells Git that from now on it will not be keeping track of a given filename, and that will take effect at the next commit.&nbsp; Old versions of the file are still in the repository.
</p>
<p>If you want to see what&nbsp;changes will be applied at the next commit run this:
</p>
<pre>git status</pre>
<p>Finally, to put your latest changes in the repository use this:
</p>
<pre>git commit &nbsp;-a -m "Put a comment here"</pre>
<p>If you leave off the -m an editor will open up and you can type in a comment, then save and exit. Unfortunately by default the editor is vi, an old text mode editor that is not friendly like gedit.
</p>
<p>When we have all our changes done we can send them to the central repository using <strong>git push</strong>:
</p>
<pre>git push</pre>
<p>We can get the latest changes from other developers by doing <strong>git pull</strong>:
</p>
<pre><strong>git pull</strong>
remote: Counting objects: 17, done.
remote: Compressing objects: 100% (14/14), done.
remote: Total 15 (delta 3), reused 0 (delta 0)
Unpacking objects: 100% (15/15), done.
From gitorious@git.sugarlabs.org:myo-sugar-activities-examples/mainline
   2cb3a1e..700789d  master     -&gt; origin/master
Updating 2cb3a1e..700789d
Fast forward
 .gitignore               |    6 +
 MANIFEST                 |  244 +-----------------------------------
 ReadEtexts.py            |  182 +++++++++++++++++++++++++++
 ReadEtextsActivity.py    |  182 +++++++++++++++++++++++++++
 ReadEtextsActivity2.py   |  311 ++++++++++++++++++++++++++++++++++++++++++++++
 activity/activity.info   |    9 ++
 activity/read-etexts.svg |   71 +++++++++++
 setup.py                 |   21 +++
 toolbar.py               |  136 ++++++++++++++++++++
 9 files changed, 921 insertions(+), 241 deletions(-)
 create mode 100644 .gitignore
 create mode 100755 ReadEtexts.py
 create mode 100644 ReadEtextsActivity.py
 create mode 100644 ReadEtextsActivity2.py
 create mode 100644 activity/activity.info
 create mode 100644 activity/read-etexts.svg
 create mode 100755 setup.py
 create mode 100644 toolbar.py
&nbsp;</pre><h1>License</h1> 
<p>All chapters copyright of the authors (see below). Unless otherwise stated all chapters in this manual licensed with <strong>GNU General Public License version 2</strong> 
</p> 
This documentation is free documentation; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
<p>
This documentation is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
<p>
You should have received a copy of the GNU General Public License
along with this documentation; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
<p />
<h1><a name="Authors"></a> Authors </h1> 
<p> 
</p><i>ADD REFINEMENTS</i><br/>&copy; James  Simmons 2009, 2010<hr/><i>CREATING YOUR FIRST ACTIVITY</i><br/>&copy; Anne  Gentle 2009<br/>Modifications:<br/>James  Simmons 2009<br/><hr/><i>CREDITS</i><br/>&copy; adam  hyde 2006, 2007<hr/><i>INHERIT FROM SUGAR.ACTIVITY.ACTIVITY</i><br/>&copy; James  Simmons 2009<hr/><i>INTRODUCTION</i><br/>&copy; adam  hyde 2006, 2007<br/>Modifications:<br/>James  Simmons 2009<br/><hr/><i>WHAT DO I NEED TO KNOW TO WRITE A SUGAR ACTIVITY?</i><br/>&copy; Anne  Gentle 2009<br/>Modifications:<br/>James  Simmons 2009<br/><hr/><i>PACKAGE THE ACTIVITY</i><br/>&copy; James  Simmons 2009<hr/><i>SETTING UP A DEVELOPMENT ENVIRONMENT</i><br/>&copy; Anne  Gentle 2009<br/>Modifications:<br/>James  Simmons 2009<br/><hr/><i>MAKING A STANDALONE PYTHON PROGRAM</i><br/>&copy; James  Simmons 2009<hr/><i>ADD YOUR ACTIVITY CODE TO VERSION CONTROL</i><br/>&copy; James  Simmons 2010<hr/><i>WHAT IS SUGAR?</i><br/>&copy; Anne  Gentle 2009<br/>Modifications:<br/>James  Simmons 2009<br/><hr/><i>WHAT IS A SUGAR ACTIVITY?</i><br/>&copy; Anne  Gentle 2009<br/>Modifications:<br/>James  Simmons 2009<br/><hr/>&nbsp; 
<p> 
<a href="http://www.flossmanuals.net/"><img alt="100.gif" src="/floss/pub/Floss/100.gif" height="54" width="110" border=0/></a>
<br /><strong></strong> 
</p> 
<p><sub>Free manuals for free software</sub> 
</p> 
<p>
</p> 
<p>&nbsp; 
</p> 
<p>&nbsp; 
</p> 
<h1><a name="General Public License"></a> General Public License </h1> 
<p>Version 2, June 1991 
</p> 
<p>Copyright (C) 1989, 1991 Free Software Foundation, Inc. 
<br>51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
<br>
<br>Everyone is permitted to copy and distribute verbatim copies
<br>of this license document, but changing it is not allowed.
<br>
</p> 
<p><strong>Preamble</strong> 
</p> 
<p> The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too. 
</p> 
<p> When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. 
<p />
</p> 
<p> To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. 
</p> 
<p> For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. 
</p> 
<p> We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. 
</p> 
<p> Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. 
</p> 
<p> Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. 
</p> 
<p> The precise terms and conditions for copying, distribution and modification follow. 
<p />
</p> 
<p><strong>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</strong> 
</p> 
<p> <strong>0.</strong> This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The "Program", below, refers to any such program or work, and a "work based on the Program" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term "modification".) Each licensee is addressed as "you". 
</p> 
<p> Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 
</p> 
<p> <strong>1.</strong> You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. 
</p> 
<p />
<p> You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 
</p> 
<p> <strong>2.</strong> You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: 
</p> <dl> <dt> 
<br></dt> <dd> <strong>a)</strong> You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. </dd> <dt> 
<p />
<br></dt> <dd> <strong>b)</strong> You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. </dd> <dt> 
<br></dt> <dd> <strong>c)</strong> If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) </dd> </dl> 
<p> These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. 
</p> 
<p />
<p> Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. 
</p> 
<p> In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 
</p> 
<p> <strong>3.</strong> You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: 
</p> <!-- we use this doubled UL to get the sub-sections indented, --> <!-- while making the bullets as unobvious as possible. --> <dl> <dt> 
<br></dt> <dd> <strong>a)</strong> Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, </dd> <dt> 
<p />
<br></dt> <dd> <strong>b)</strong> Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, </dd> <dt> 
<br></dt> <dd> <strong>c)</strong> Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) </dd> </dl> 
<p> The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. 
</p> 
<p />
<p> If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 
</p> 
<p> <strong>4.</strong> You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 
</p> 
<p> <strong>5.</strong> You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 
</p> 
<p> <strong>6.</strong> Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 
<p />
</p> 
<p> <strong>7.</strong> If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. 
</p> 
<p> If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. 
</p> 
<p> It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. 
</p> 
<p> This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 
</p> 
<p> <strong>8.</strong> If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 
<p />
</p> 
<p> <strong>9.</strong> The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. 
</p> 
<p> Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and "any later version", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 
</p> 
<p> <strong>10.</strong> If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. 
</p> 
<p><strong>NO WARRANTY</strong> 
</p> 
<p />
<p> <strong>11.</strong> BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 
</p> 
<p> <strong>12.</strong> IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 
</p> 
<p><strong>END OF TERMS AND CONDITIONS</strong> 
</p> 
<p>
</body>
</html>