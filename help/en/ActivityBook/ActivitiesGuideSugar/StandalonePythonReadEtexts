<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
	<head>
		<title>ActivitiesGuideSugar (en)</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<!--
		<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="WebRss.html" />
		-->
		<link rel="icon" href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" /> <link rel="shortcut icon" href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" />
		<link rel=StyleSheet href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/typography.css" type="text/css" media="screen">
<style>
#index {
	 color:  #ff7f00;
	 font-family: trebuchet,sans-serif;
	 font-size: 10px;
	 line-height:11px;
}
#index UL {
	 width: 159px;
	 list-style-type: None;
	 padding-left: 0px;
	 border: 14px solid #ff7f00;
	 background-color: #ff7f00;
	 margin: 0px 0px 0px 0px;
  }
#index  LI {
	 padding-left: 0px;
	 padding-right: 10px;
	 padding-top: 4px;
	 padding-bottom: 4px;
	 color: #ffffff;
	 margin: 0px 0px 0px 0px;
	 background-color: #ff7f00;
	 border-top: 1px solid #ff7f00;
  }
#index LI:hover {
  background-color: #F99B1C;
}
#index  LI.heading {
	 background-color: #ff7f00;
	 color: #000000;
	 border-top:1px solid #FFE5CC;
	 padding-top: 7px;
	 font-weight: bold;
}
#index  LI.title {
	 border-bottom: 2px solid #FFE5CC;
	 background-color: #ff7f00;
	 color: #FBF4E9;
	 font-weight: bolder;
	 font-size:10px;
	 line-height:18px;
	 padding-bottom: 40px;
  }
#index A {
	 text-decoration: none;
	 color:  #FBF4E9;
	 font-weight: bold;
}
#ds-layout .imgcontainer {
	position:relative;
	}
#ds-layout .caption {
	position:relative;
	bottom:1;
	left:0;
	text-align:center;
	background:#ffe7cb;
	width:100%;
	opacity:.75;
	filter:alpha(opacity=85);
	color:#000;
	font-style: italic;
	 	font-size: 9px;
	line-height:11px;
	}
</style>
<script type="text/javascript">
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
	 window.onload = func;
  } else {
	 window.onload = function() {
		oldonload();
		func();
	 }
  }
}

function insertAfter(newElement,targetElement) {
  var parent = targetElement.parentNode;
  if (parent.lastChild == targetElement) {
	 parent.appendChild(newElement);
  } else {
	 parent.insertBefore(newElement,targetElement.nextSibling);
  }
}

function captionizeImages() {
  if (!document.getElementsByTagName) return false;
  if (!document.createElement) return false;
  var images = document.getElementsByTagName("img");
  if (images.length < 1) return false; 
  for (var i=0; i<images.length; i++) {
	 if (images[i].className != "non") {
		var title = images[i].getAttribute("title");
		var width = images[i].width;
		var divCaption = document.createElement("div");
		divCaption.className="caption";
		divCaption.style.width=width+'px';
		if (title) divCaption.style.padding='2px 0px 3px 0px';
		divCaption.style.display='block';
		var divCaption_text = document.createTextNode(title);
		divCaption.appendChild(divCaption_text);
		var divContainer = document.createElement("div");
		divContainer.className="imgcontainer";
		if (title) divContainer.style.padding='0px 0px 10px 0px';
		images[i].parentNode.insertBefore(divContainer,images[i]);
		divContainer.appendChild(images[i]);
		insertAfter(divCaption,images[i]);
	 }
  }
}
//addLoadEvent(captionizeImages);

function next () {
var onode, otarget;
onode=document.getElementById("StandalonePythonReadEtexts");
if (onode.id=="Credits") die;
//alert (onode.id);
onode=onode.nextSibling;
if (onode.id=="heading") onode=onode.nextSibling;
while (onode) {
	 //onode=onode.nextSibling;
	 if (onode.nodeType==1) {
	//alert (onode.id);
		  otarget=onode;
		  break;
	 }
	 onode=onode.nextSibling;
}
if (otarget) {
	 //you actually have found one, and do something here
	 //alert(otarget.id + "\n" + otarget.tagName);    //just to verify
	 top.location = "/ActivitiesGuideSugar/" + otarget.id;
} else {
	 //you don't find one
//alert("nada" + otarget.id);
}
}

function previous () {
var onode, otarget;
onode=document.getElementById("StandalonePythonReadEtexts");
if (onode.id=="Introduction") die;
//alert (onode.id);
onode=onode.previousSibling;
if (onode.id=="heading") onode=onode.previousSibling;
if (onode.id=="title") die;
while (onode) {
	 //onode=onode.previousSibling;
	 if (onode.nodeType==1) {
	//alert (onode.id);
		  otarget=onode;
		  break;
	 }
	 onode=onode.previousSibling;
}
if (otarget) {
	 //you actually have found one, and do something here
	 //alert(otarget.id + "\n" + otarget.tagName);    //just to verify
	 top.location =  otarget.id;
} else {
	 //you don't find one
//alert("nada" + otarget.id);
}
}

</script>
	</head>
	<body  background="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/background.gif" style="margin:0;color:#000000;">
<div id="home" style="position:absolute;left:0px;top:10px;">
<a href="/"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/top_read_back.gif" border="0"></a>
</div>
<div id="index" style="position:absolute;left:0px;top:150px;">
<ul>
<li class="title">MAKING SUGAR ACTIVITIES</li><li id="Introduction"><a href="/ActivitiesGuideSugar/Introduction">INTRODUCTION</a></li><li id="WhatIsSugar"><a href="/ActivitiesGuideSugar/WhatIsSugar">WHAT IS SUGAR?</a></li><li id="WhatisanActivity"><a href="/ActivitiesGuideSugar/WhatisanActivity">WHAT IS A SUGAR ACTIVITY?</a></li><li id="NeedtoKnowWriteSugarActivity"><a href="/ActivitiesGuideSugar/NeedtoKnowWriteSugarActivity">WHAT DO I NEED TO KNOW TO WRITE A SUGAR ACTIVITY?</a></li><li id="SetUpDevEnvironment"><a href="/ActivitiesGuideSugar/SetUpDevEnvironment">SETTING UP A DEVELOPMENT ENVIRONMENT</a></li><li id="CreateFirstActivity"><a href="/ActivitiesGuideSugar/CreateFirstActivity">CREATING YOUR FIRST ACTIVITY</a></li><li id="StandalonePythonReadEtexts"><a href="/ActivitiesGuideSugar/StandalonePythonReadEtexts">MAKING A STANDALONE PYTHON PROGRAM</a></li><li id="InheritFromActivity"><a href="/ActivitiesGuideSugar/InheritFromActivity">INHERIT FROM SUGAR.ACTIVITY.ACTIVITY</a></li><li id="PackageTheActivity"><a href="/ActivitiesGuideSugar/PackageTheActivity">PACKAGE THE ACTIVITY</a></li><li id="AddRefinements"><a href="/ActivitiesGuideSugar/AddRefinements">ADD REFINEMENTS</a></li><li id="UsingVersionControl"><a href="/ActivitiesGuideSugar/UsingVersionControl">ADD YOUR ACTIVITY CODE TO VERSION CONTROL</a></li><li id="Credits"><a href="/ActivitiesGuideSugar/Credits">CREDITS</a></li></ul>
</div>
<div id="pdf" style="position:absolute;left:13px;top:190px;">
<a href="/ActivitiesGuideSugar/FM_06Jan10.pdf"><img class ="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/makepdf.gif" border=0></a>
<!-- <a href="/ActivitiesGuideSugar/FM_ActivitiesGuideSugar_06Jan10.pdf"><img class ="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/makepdf.gif" border=0></a> -->
<a href="/ActivitiesGuideSugar/print"><img class="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/viewprint.gif" border=0></a>
</div>
		<div style="position:absolute;left:240px;top:11px;">
		<table id="ds-layout" cellpadding="0" cellspacing="0" sumtop:5px;mary="" style="table-layout:fixed;width:670px;border: 5px solid #666666;padding-right: 0px;padding-left: 0px;padding-bottom: 0px;padding-top: 0px;margin-left : 10px;margin-top:10;background:#FFF7F0;">
			<tr>
			<td width=100%>
<div class="arrow" style="position:relative;left:10px;top:5px;width:50px;float:left;"><a href="#" onClick="previous();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/lefttext.png" height=20></a></div>
<div class="arrow" style="position:relative;left:528px;width:50px;top:5px;float:left;"><a href="#" onClick="next();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/righttext.png" height=20></a></div>
			<div class="ds-contentcontainer">
			<div style="margin-left:1.2em;float:right">
			<br>
			<div class="huh" style='decoration:none;color:black;border:1;position:absolute;top:60px;left:502px;'>
			<a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar/StandalonePythonReadEtexts' onClick="alert('You will now be forwarded to the FLOSS Manuals editing interface')"><b><font color=#ff7f00><small>Edit this page</small></font></b></a> :: <a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar/FMComments?skin=floss2'><b><font color=#ff7f00><small>Discussion</small></font></b></a>
			</div>
			<h1> A Standalone Python Program For Reading Etexts
</h1>
<h2>The Program
  <br />
</h2>
<p>Our example program is based on the first Activity I wrote, Read Etexts.&nbsp; This is a program for reading free e-books.
  <br />
</p>
<p>The oldest and best source of free e-books is a website called Project Gutenberg <a href="http://www.gutenberg.org/wiki/Main_Page).">(<a href="http://www.gutenberg.org/wiki/Main_Page" target="_top">http://www.gutenberg.org/wiki/Main_Page</a>).</a>&nbsp; They create books in plain text format, in other words the kind of file you could make if you typed a book into Notepad and hit the Enter key at the end of each line.&nbsp; They have thousands of books that are out of copyright, including some of the best ever written.&nbsp; Before you read further go to that website and pick out a book that interests you.&nbsp; Check out the "Top 100" list to see the most popular books and authors.
</p>
<p>The program we're going to create will read books in plain text format only.&nbsp; Fire up <em>Eric</em>, create a new Project named <em>BookExamples</em>, and create a new file called <strong>ReadEtexts.py</strong>.&nbsp; Then use copy and paste to get the code below into that file and save it.
</p>
<pre>#! /usr/bin/env python
import sys
import os
import zipfile
import pygtk
import gtk
import getopt
import pango

page=0
PAGE_SIZE = 45

class ReadEtexts():

    def keypress_cb(self, widget, event):
        "Respond when the user presses one of the arrow keys"
        keyname = gtk.gdk.keyval_name(event.keyval)
        if keyname == 'plus':
            self.font_increase()
            return True
        if keyname == 'minus':
            self.font_decrease()
            return True
        if keyname == 'Page_Up' :
            self.page_previous()
            return True
        if keyname == 'Page_Down':
            self.page_next()
            return True
        if keyname == 'Up' or keyname == 'KP_Up' \
                or keyname == 'KP_Left':
            self.scroll_up()
            return True
        if keyname == 'Down' or keyname == 'KP_Down' \
                or keyname == 'KP_Right':
            self.scroll_down()
            return True
        return False

    def page_previous(self):
        global page
        page=page-1
        if page &lt; 0: page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.upper - v_adjustment.page_size

    def page_next(self):
        global page
        page=page+1
        if page &gt;= len(self.page_index): page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.lower

    def font_decrease(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size - 1
        if font_size &lt; 1:
            font_size = 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def font_increase(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size + 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def scroll_down(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.upper - \
                v_adjustment.page_size:
            self.page_next()
            return
        if v_adjustment.value &lt; v_adjustment.upper - v_adjustment.page_size:
            new_value = v_adjustment.value + v_adjustment.step_increment
            if new_value &gt; v_adjustment.upper - v_adjustment.page_size:
                new_value = v_adjustment.upper - v_adjustment.page_size
            v_adjustment.value = new_value

    def scroll_up(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.lower:
            self.page_previous()
            return
        if v_adjustment.value &gt; v_adjustment.lower:
            new_value = v_adjustment.value - \
                v_adjustment.step_increment
            if new_value &lt; v_adjustment.lower:
                new_value = v_adjustment.lower
            v_adjustment.value = new_value

    def show_page(self, page_number):
        global PAGE_SIZE, current_word
        position = self.page_index[page_number]
        self.etext_file.seek(position)
        linecount = 0
        label_text = '\n\n\n'
        textbuffer = self.textview.get_buffer()
        while linecount &lt; PAGE_SIZE:
            line = self.etext_file.readline()
            label_text = label_text + unicode(line, 'iso-8859-1')
            linecount = linecount + 1
        label_text = label_text + '\n\n\n'
        textbuffer.set_text(label_text)
        self.textview.set_buffer(textbuffer)

    def save_extracted_file(self, zipfile, filename):
        "Extract the file to a temp directory for viewing"
        filebytes = zipfile.read(filename)
        f = open("/tmp/" + filename, 'w')
        try:
            f.write(filebytes)
        finally:
            f.close

    def read_file(self, filename):
        "Read the Etext file"
        global PAGE_SIZE

        if zipfile.is_zipfile(filename):
            self.zf = zipfile.ZipFile(filename, 'r')
            self.book_files = self.zf.namelist()
            self.save_extracted_file(self.zf, self.book_files[0])
            currentFileName = "/tmp/" + self.book_files[0]
        else:
            currentFileName = filename

        self.etext_file = open(currentFileName,"r")
        self.page_index = [ 0 ]
        linecount = 0
        while self.etext_file:
            line = self.etext_file.readline()
            if not line:
                break
            linecount = linecount + 1
            if linecount &gt;= PAGE_SIZE:
                position = self.etext_file.tell()
                self.page_index.append(position)
                linecount = 0
        if filename.endswith(".zip"):
            os.remove(currentFileName)

    def destroy_cb(self, widget, data=None):
        gtk.main_quit()

    def main(self, file_path):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("destroy", self.destroy_cb)
        self.window.set_title("Read Etexts")
        self.window.set_size_request(640, 480)
        self.window.set_border_width(0)
        self.read_file(file_path)
        self.scrolled_window = gtk.ScrolledWindow(hadjustment=None, \
                                                  vadjustment=None)
        self.textview = gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_left_margin(50)
        self.textview.set_cursor_visible(False)
        self.textview.connect("key_press_event", self.keypress_cb)
        buffer = self.textview.get_buffer()
        self.font_desc = pango.FontDescription("sans 12")
        font_size = self.font_desc.get_size()
        self.textview.modify_font(self.font_desc)
        self.show_page(0)
        self.scrolled_window.add(self.textview)
        self.window.add(self.scrolled_window)
        self.textview.show()
        self.scrolled_window.show()
        v_adjustment = self.scrolled_window.get_vadjustment()
        self.window.show()
        gtk.main()

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "")
        ReadEtexts().main(args[0])
    except getopt.error, msg:
        print msg
        print "This program has no options"
        sys.exit(2)
</pre>
<h2> Running The Program
</h2>
<p>To run the program you should first make it executeable.&nbsp; You only need to do this once:
</p>
<pre>chmod 755 ReadEtexts.py</pre>
<p>For this example I downloaded the file for Pride and Prejudice.&nbsp; The program will work with either of the Plain text formats, which are either uncompressed text or a Zip file.&nbsp; The zip file is named 1342.zip, and we can read the book by running this from a terminal:
</p>
<pre>./ReadEtexts.py 1342.zip</pre>
<p>This is what the program looks like in action:
</p>
<p><img alt="The standalone Read Etexts program in action." src="/floss/publish/ActivitiesGuideSugar/rsrc/ActivitiesGuideSugar/ReadEtexts_01_1.jpg" height="503" width="646" />
</p>
<p>You can use the <em>Page Up, Page Down, Up, Down, Left</em>, and <em>Right</em> keys to navigate through the book and the '+' and '-' keys to adjust the font size.
</p>
<h2>How The Program Works
</h2>
<p>This program reads through the text file containing the book and divides it into pages of 45 lines each.&nbsp; We need to do this because the gtk.TextView component we use for viewing the text would need a lot of memory to scroll through the whole book and that would hurt performance.&nbsp; A second reason is that we want to make reading the e-book as much as possible like reading a regular book, and regular books have pages.&nbsp; If a teacher assigns reading from a book she might say "read pages 35-50 for tommorow".&nbsp; Finally, we want this program to remember what page you stopped reading on and bring you back to that page again when you read the book next time.&nbsp; (The program we have so far doesn't do that yet).
</p>
<p>To page through the book we use <em>random access</em> to read the file.&nbsp; To understand what random access means to a file, consider a VHS tape and a DVD.&nbsp; To get to a certain scene in a VHS tape you need to go through all the scenes that came before it, in order.&nbsp; Even though you do it at high speed you still have to look at all of them to find the place you want to start watching.&nbsp; This is <em>sequential access</em>.&nbsp; On the other hand a DVD has chapter stops and possibly a chapter menu.&nbsp; Using a chapter menu you can look at any scene in the movie right away, and you can skip around as you like.&nbsp; This is random access, and the chapter menu is like an <em>index</em>.&nbsp; Of course you can access the material in a DVD sequentially too.
</p>
<p>We need random access to skip to whatever page we like, and we need an index so that we know where each page begins.&nbsp; We make the index by reading the entire file one line at a time.&nbsp; Every 45 lines we make a note of how many characters into the file we've gotten and store this information in a Python list.&nbsp; Then we go back to the beginning of the file and display the first page.&nbsp; When the program user goes to the next or previous page we figure out what the new page number will be and look in the list entry for that page.&nbsp; This tells us that page starts 4,200 characters into the file.&nbsp; We use seek() on the file to go to that character and then we read 45 lines starting at that point and load them into the TextView.
</p>
<p>When you run this program notice how fast it is.&nbsp; Python programs take longer to run a line of code than a compiled language would, but in this program it doesn't matter because the heavy lifting in the program is done by the TextView, which was created in a compiled language.&nbsp; The Python parts don't do that much so the program doesn't spend much time running them.
</p>
<p>Sugar uses Python a lot, not just for Activities but for the Sugar environment itself.&nbsp; You may read somewhere that using so much Python is "a disaster" for performance.&nbsp; Don't believe it.
</p>
<p>There are no slow programming languages, only slow programmers.
  <br />
</p>
<p />
			</p></div>
			</div>
<div class="arrow" style="position:relative;left:10px;width:50px;float:left;bottom:5px;"><a href="#" onClick="previous();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/lefttext.png" height=20></a></div>
<div class="arrow" style="position:relative;left:528px;width:50px;float:left;bottom:5px;"><a href="#" onClick="next();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/righttext.png" height=20></a></div>
			<br>
			<br>
			<br>
			<br>
			</td>
			</tr>
		</table>
		</div>
<!-- Piwik -->
<a href="http://piwik.org" title="Web analytics" onclick="window.open(this.href);return(false);">
<script language="javascript" src="http://adam.engagetv.com/piwik/piwik.js" type="text/javascript"></script>
<script type="text/javascript">
<!--
piwik_action_name = '';
piwik_idsite = 1;
piwik_url = 'http://adam.engagetv.com/piwik/piwik.php';
piwik_log(piwik_action_name, piwik_idsite, piwik_url);
//-->
</script>
<!-- /Piwik --> 
<script language="Javascript">
document.getElementById("StandalonePythonReadEtexts").style.backgroundColor="#F99B1C";
</script>
</body>
</html>