<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
	<head>
		<title>ActivitiesGuideSugar (en)</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<!--
		<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="WebRss.html" />
		-->
		<link rel="icon" href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" /> <link rel="shortcut icon" href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/fl2.ico" type="image/x-icon" />
		<link rel=StyleSheet href="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/typography.css" type="text/css" media="screen">
<style>
#index {
	 color:  #ff7f00;
	 font-family: trebuchet,sans-serif;
	 font-size: 10px;
	 line-height:11px;
}
#index UL {
	 width: 159px;
	 list-style-type: None;
	 padding-left: 0px;
	 border: 14px solid #ff7f00;
	 background-color: #ff7f00;
	 margin: 0px 0px 0px 0px;
  }
#index  LI {
	 padding-left: 0px;
	 padding-right: 10px;
	 padding-top: 4px;
	 padding-bottom: 4px;
	 color: #ffffff;
	 margin: 0px 0px 0px 0px;
	 background-color: #ff7f00;
	 border-top: 1px solid #ff7f00;
  }
#index LI:hover {
  background-color: #F99B1C;
}
#index  LI.heading {
	 background-color: #ff7f00;
	 color: #000000;
	 border-top:1px solid #FFE5CC;
	 padding-top: 7px;
	 font-weight: bold;
}
#index  LI.title {
	 border-bottom: 2px solid #FFE5CC;
	 background-color: #ff7f00;
	 color: #FBF4E9;
	 font-weight: bolder;
	 font-size:10px;
	 line-height:18px;
	 padding-bottom: 40px;
  }
#index A {
	 text-decoration: none;
	 color:  #FBF4E9;
	 font-weight: bold;
}
#ds-layout .imgcontainer {
	position:relative;
	}
#ds-layout .caption {
	position:relative;
	bottom:1;
	left:0;
	text-align:center;
	background:#ffe7cb;
	width:100%;
	opacity:.75;
	filter:alpha(opacity=85);
	color:#000;
	font-style: italic;
	 	font-size: 9px;
	line-height:11px;
	}
</style>
<script type="text/javascript">
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
	 window.onload = func;
  } else {
	 window.onload = function() {
		oldonload();
		func();
	 }
  }
}

function insertAfter(newElement,targetElement) {
  var parent = targetElement.parentNode;
  if (parent.lastChild == targetElement) {
	 parent.appendChild(newElement);
  } else {
	 parent.insertBefore(newElement,targetElement.nextSibling);
  }
}

function captionizeImages() {
  if (!document.getElementsByTagName) return false;
  if (!document.createElement) return false;
  var images = document.getElementsByTagName("img");
  if (images.length < 1) return false; 
  for (var i=0; i<images.length; i++) {
	 if (images[i].className != "non") {
		var title = images[i].getAttribute("title");
		var width = images[i].width;
		var divCaption = document.createElement("div");
		divCaption.className="caption";
		divCaption.style.width=width+'px';
		if (title) divCaption.style.padding='2px 0px 3px 0px';
		divCaption.style.display='block';
		var divCaption_text = document.createTextNode(title);
		divCaption.appendChild(divCaption_text);
		var divContainer = document.createElement("div");
		divContainer.className="imgcontainer";
		if (title) divContainer.style.padding='0px 0px 10px 0px';
		images[i].parentNode.insertBefore(divContainer,images[i]);
		divContainer.appendChild(images[i]);
		insertAfter(divCaption,images[i]);
	 }
  }
}
//addLoadEvent(captionizeImages);

function next () {
var onode, otarget;
onode=document.getElementById("InheritFromActivity");
if (onode.id=="Credits") die;
//alert (onode.id);
onode=onode.nextSibling;
if (onode.id=="heading") onode=onode.nextSibling;
while (onode) {
	 //onode=onode.nextSibling;
	 if (onode.nodeType==1) {
	//alert (onode.id);
		  otarget=onode;
		  break;
	 }
	 onode=onode.nextSibling;
}
if (otarget) {
	 //you actually have found one, and do something here
	 //alert(otarget.id + "\n" + otarget.tagName);    //just to verify
	 top.location = "/ActivitiesGuideSugar/" + otarget.id;
} else {
	 //you don't find one
//alert("nada" + otarget.id);
}
}

function previous () {
var onode, otarget;
onode=document.getElementById("InheritFromActivity");
if (onode.id=="Introduction") die;
//alert (onode.id);
onode=onode.previousSibling;
if (onode.id=="heading") onode=onode.previousSibling;
if (onode.id=="title") die;
while (onode) {
	 //onode=onode.previousSibling;
	 if (onode.nodeType==1) {
	//alert (onode.id);
		  otarget=onode;
		  break;
	 }
	 onode=onode.previousSibling;
}
if (otarget) {
	 //you actually have found one, and do something here
	 //alert(otarget.id + "\n" + otarget.tagName);    //just to verify
	 top.location =  otarget.id;
} else {
	 //you don't find one
//alert("nada" + otarget.id);
}
}

</script>
	</head>
	<body  background="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/background.gif" style="margin:0;color:#000000;">
<div id="home" style="position:absolute;left:0px;top:10px;">
<a href="/"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/top_read_back.gif" border="0"></a>
</div>
<div id="index" style="position:absolute;left:0px;top:150px;">
<ul>
<li class="title">MAKING SUGAR ACTIVITIES</li><li id="Introduction"><a href="/ActivitiesGuideSugar/Introduction">INTRODUCTION</a></li><li id="WhatIsSugar"><a href="/ActivitiesGuideSugar/WhatIsSugar">WHAT IS SUGAR?</a></li><li id="WhatisanActivity"><a href="/ActivitiesGuideSugar/WhatisanActivity">WHAT IS A SUGAR ACTIVITY?</a></li><li id="NeedtoKnowWriteSugarActivity"><a href="/ActivitiesGuideSugar/NeedtoKnowWriteSugarActivity">WHAT DO I NEED TO KNOW TO WRITE A SUGAR ACTIVITY?</a></li><li id="SetUpDevEnvironment"><a href="/ActivitiesGuideSugar/SetUpDevEnvironment">SETTING UP A DEVELOPMENT ENVIRONMENT</a></li><li id="CreateFirstActivity"><a href="/ActivitiesGuideSugar/CreateFirstActivity">CREATING YOUR FIRST ACTIVITY</a></li><li id="StandalonePythonReadEtexts"><a href="/ActivitiesGuideSugar/StandalonePythonReadEtexts">MAKING A STANDALONE PYTHON PROGRAM</a></li><li id="InheritFromActivity"><a href="/ActivitiesGuideSugar/InheritFromActivity">INHERIT FROM SUGAR.ACTIVITY.ACTIVITY</a></li><li id="PackageTheActivity"><a href="/ActivitiesGuideSugar/PackageTheActivity">PACKAGE THE ACTIVITY</a></li><li id="AddRefinements"><a href="/ActivitiesGuideSugar/AddRefinements">ADD REFINEMENTS</a></li><li id="UsingVersionControl"><a href="/ActivitiesGuideSugar/UsingVersionControl">ADD YOUR ACTIVITY CODE TO VERSION CONTROL</a></li><li id="Credits"><a href="/ActivitiesGuideSugar/Credits">CREDITS</a></li></ul>
</div>
<div id="pdf" style="position:absolute;left:13px;top:190px;">
<a href="/ActivitiesGuideSugar/FM_06Jan10.pdf"><img class ="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/makepdf.gif" border=0></a>
<!-- <a href="/ActivitiesGuideSugar/FM_ActivitiesGuideSugar_06Jan10.pdf"><img class ="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/makepdf.gif" border=0></a> -->
<a href="/ActivitiesGuideSugar/print"><img class="non" src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/viewprint.gif" border=0></a>
</div>
		<div style="position:absolute;left:240px;top:11px;">
		<table id="ds-layout" cellpadding="0" cellspacing="0" sumtop:5px;mary="" style="table-layout:fixed;width:670px;border: 5px solid #666666;padding-right: 0px;padding-left: 0px;padding-bottom: 0px;padding-top: 0px;margin-left : 10px;margin-top:10;background:#FFF7F0;">
			<tr>
			<td width=100%>
<div class="arrow" style="position:relative;left:10px;top:5px;width:50px;float:left;"><a href="#" onClick="previous();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/lefttext.png" height=20></a></div>
<div class="arrow" style="position:relative;left:528px;width:50px;top:5px;float:left;"><a href="#" onClick="next();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/righttext.png" height=20></a></div>
			<div class="ds-contentcontainer">
			<div style="margin-left:1.2em;float:right">
			<br>
			<div class="huh" style='decoration:none;color:black;border:1;position:absolute;top:60px;left:502px;'>
			<a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar/InheritFromActivity' onClick="alert('You will now be forwarded to the FLOSS Manuals editing interface')"><b><font color=#ff7f00><small>Edit this page</small></font></b></a> :: <a href='http://www.flossmanuals.net/bin/view/ActivitiesGuideSugar/FMComments?skin=floss2'><b><font color=#ff7f00><small>Discussion</small></font></b></a>
			</div>
			<h1>Inherit From sugar.activity.Activity
</h1>
<h2>Object Oriented Python
  <br />
</h2>
<p class="western">Python supports two styles of programming: <em>procedural</em> and <em>object oriented</em>. Procedural programming is when you have some input data, do some processing on it, and produce an output. If you want to calculate all the prime numbers under a hundred or convert a Word document into a plain text file you'll probably use the procedural style to do that.
</p>
<p class="western">Object oriented programs are built up from units called <em>objects</em>. An object is described as a collection of fields or attributes containing data along with methods for doing things with that data. In addition to doing work and storing data objects can send messages to one another.
</p>
<p class="western">Consider a word processing program. It doesn't have just one input, some process, and one output. It can receive input from the keyboard, from the mouse buttons, from the mouse traveling over something, from the clipboard, etc. It can send output to the screen, to a file, to a printer, to the clipboard, etc. A word processor can edit several documents at the same time too. Any program with a GUI is a natural fit for the object oriented style of programming.
</p>
<p class="western">Objects are described by <em>classes</em>. When you create an object you are creating an <em>instance</em> of a class.
</p>
<p class="western">There's one other thing that a class can do, which is to <em>inherit</em> methods and attributes from another class. When you define a class you can say it <em>extends</em> some class, and by doing that in effect your class has the functionality of the other class plus its own functionality. The extended class becomes its parent.
  <br />
</p>
<p class="western">All Sugar Activities extend a Python class called <em>sugar.activity.Activity</em>. This class provides methods that all Activities need. In addition to that, there are methods that you can override in your own class that the parent class will call when it needs to. For the beginning Activity writer three methods are important:
</p>
<p class="western"><em>__init__()</em>
</p>
<p class="western">This is called when your Activity is started up. This is where you will set up the user interface for your Activity, including toolbars.
</p>
<p class="western"><em>read_file(self, file_path)</em>
</p>
<p class="western">This is called when you resume an Activity from a Journal entry. It is called after the <em>__init__()</em> method is called. The file_path parameter contains the name of a temporary file that is a copy of the file in the Journal entry. The file is deleted as soon as this method finishes, but because Sugar runs on Linux if you open the file for reading your program can continue to read it even after it is deleted and it the file will not actually go away until you close it.
</p>
<p class="western"><em>write_file(self, file_path)</em>
</p>
<p class="western">This is called when the Activity updates the Journal entry. Just like with <em>read_file()</em> your Activity does not work with the Journal directly. Instead it opens the file named in file_path for output and writes to it. That file in turn is copied to the Journal entry.
</p>
<p class="western">There are three things that can cause <em>write_file()</em> to be executed:
</p>
<ul>
  <li>
  <p class="western">Your Activity closes.
  </p> </li>
  <li>
  <p class="western">Someone presses the <strong>Keep</strong> button in the Activity toolbar.
  </p> </li>
  <li>
  <p class="western">Your Activity ceases to be the active Activity, or someone moves from the Activity View to some other View.
  </p> </li>
</ul>
<p class="western">In addition to updating the file in the Journal entry the <em>read_file()</em> and <em>write_file()</em> methods are used to read and update the metadata in the Journal entry.
</p>
<p> When we convert our standalone Python program to an Activity we'll take out much of the code we wrote and replace it with code inherited from the sugar.activity.Activity&nbsp; class.
</p>
<h2>Extending The Activity Class
</h2>
<p>Here's a version of our program that extends Activity:
</p>
<pre>import sys
import os
import zipfile
import pygtk
import gtk
import pango
from sugar.activity import activity
from sugar.graphics import style

page=0
PAGE_SIZE = 45

class ReadEtextsActivity(activity.Activity):
    def __init__(self, handle):
        "The entry point to the Activity"
        global page
        activity.Activity.__init__(self, handle)

        toolbox = activity.ActivityToolbox(self)
        activity_toolbar = toolbox.get_activity_toolbar()
        activity_toolbar.keep.props.visible = False
        activity_toolbar.share.props.visible = False
        self.set_toolbox(toolbox)

        toolbox.show()
        self.scrolled_window = gtk.ScrolledWindow()
        self.scrolled_window.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
        self.scrolled_window.props.shadow_type = gtk.SHADOW_NONE

        self.textview = gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_cursor_visible(False)
        self.textview.set_left_margin(50)
        self.textview.connect("key_press_event", self.keypress_cb)

        self.scrolled_window.add(self.textview)
        self.set_canvas(self.scrolled_window)
        self.textview.show()
        self.scrolled_window.show()
        page = 0
        self.textview.grab_focus()
        self.font_desc = pango.FontDescription("sans %d" % style.zoom(10))
        self.textview.modify_font(self.font_desc)

    def keypress_cb(self, widget, event):
        "Respond when the user presses one of the arrow keys"
        keyname = gtk.gdk.keyval_name(event.keyval)
        print keyname
        if keyname == 'plus':
            self.font_increase()
            return True
        if keyname == 'minus':
            self.font_decrease()
            return True
        if keyname == 'Page_Up' :
            self.page_previous()
            return True
        if keyname == 'Page_Down':
            self.page_next()
            return True
        if keyname == 'Up' or keyname == 'KP_Up' \
                or keyname == 'KP_Left':
            self.scroll_up()
            return True
        if keyname == 'Down' or keyname == 'KP_Down' \
                or keyname == 'KP_Right':
            self.scroll_down()
            return True
        return False

    def page_previous(self):
        global page
        page=page-1
        if page &lt; 0: page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.upper - v_adjustment.page_size

    def page_next(self):
        global page
        page=page+1
        if page &gt;= len(self.page_index): page=0
        self.show_page(page)
        v_adjustment = self.scrolled_window.get_vadjustment()
        v_adjustment.value = v_adjustment.lower

    def font_decrease(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size - 1
        if font_size &lt; 1:
            font_size = 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def font_increase(self):
        font_size = self.font_desc.get_size() / 1024
        font_size = font_size + 1
        self.font_desc.set_size(font_size * 1024)
        self.textview.modify_font(self.font_desc)

    def scroll_down(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.upper - \
                v_adjustment.page_size:
            self.page_next()
            return
        if v_adjustment.value &lt; v_adjustment.upper - v_adjustment.page_size:
            new_value = v_adjustment.value + v_adjustment.step_increment
            if new_value &gt; v_adjustment.upper - v_adjustment.page_size:
                new_value = v_adjustment.upper - v_adjustment.page_size
            v_adjustment.value = new_value

    def scroll_up(self):
        v_adjustment = self.scrolled_window.get_vadjustment()
        if v_adjustment.value == v_adjustment.lower:
            self.page_previous()
            return
        if v_adjustment.value &gt; v_adjustment.lower:
            new_value = v_adjustment.value - \
                v_adjustment.step_increment
            if new_value &lt; v_adjustment.lower:
                new_value = v_adjustment.lower
            v_adjustment.value = new_value

    def show_page(self, page_number):
        global PAGE_SIZE, current_word
        position = self.page_index[page_number]
        self.etext_file.seek(position)
        linecount = 0
        label_text = '\n\n\n'
        textbuffer = self.textview.get_buffer()
        while linecount &lt; PAGE_SIZE:
            line = self.etext_file.readline()
            label_text = label_text + unicode(line, 'iso-8859-1')
            linecount = linecount + 1
        label_text = label_text + '\n\n\n'
        textbuffer.set_text(label_text)
        self.textview.set_buffer(textbuffer)

    def save_extracted_file(self, zipfile, filename):
        "Extract the file to a temp directory for viewing"
        filebytes = zipfile.read(filename)
        outfn = self.make_new_filename(filename)
        if (outfn == ''):
            return False
        f = open(os.path.join(self.get_activity_root(), 'instance',  outfn),  'w')
        try:
            f.write(filebytes)
        finally:
            f.close

    def read_file(self, filename):
        "Read the Etext file"
        global PAGE_SIZE

        if zipfile.is_zipfile(filename):
            self.zf = zipfile.ZipFile(filename, 'r')
            self.book_files = self.zf.namelist()
            self.save_extracted_file(self.zf, self.book_files[0])
            currentFileName = os.path.join(self.get_activity_root(),\
                'instance',  self.book_files[0])
        else:
            currentFileName = filename

        self.etext_file = open(currentFileName,"r")
        self.page_index = [ 0 ]
        linecount = 0
        while self.etext_file:
            line = self.etext_file.readline()
            if not line:
                break
            linecount = linecount + 1
            if linecount &gt;= PAGE_SIZE:
                position = self.etext_file.tell()
                self.page_index.append(position)
                linecount = 0
        if filename.endswith(".zip"):
            os.remove(currentFileName)
        self.show_page(0)

    def make_new_filename(self, filename):
        partition_tuple = filename.rpartition('/')
        return partition_tuple[2]


</pre>
<p>This program has some significant differences from the standalone version.&nbsp; First, note that this line:
</p>
<pre>#! /usr/bin/env python
</pre>
<p>has been removed.&nbsp; We are no longer running the program directly from the Python interpreter.&nbsp; Now Sugar is running it as an Activity.&nbsp; Notice that much (but not all) of what was in the main() method has been moved to the <em>__init__()</em> method and the <em>main()</em> method has been removed.
</p>
<p>Notice too that the <em>class</em> statement has changed:
</p>
<p>
</p>
<pre>class ReadEtextsActivity(activity.Activity)
</pre>
<p>This statement now tells us that class ReadEtextsActivity extends the class <strong>sugar.activity.Activity</strong>.&nbsp;&nbsp; As a result it inherits the code that is in that class.&nbsp; Therefore we no longer need a GTK main loop, or to define a window.&nbsp; The code in this class we extend will do that for us.
</p>
<p> While we gain much from this inheritance, we lose something too: a title bar for the main window.&nbsp; In a graphical operating environment a piece of software called a <em>window manager</em> is responsible for putting borders on windows, making them resizeable, reducing them to icons, maximizing them, etc.&nbsp; Sugar uses a window manager named Matchbox which makes each window fill the whole screen and puts no border, title bar, or any other window decorations on the windows.&nbsp;&nbsp; As a result of that we can't close our application by clicking on the "X" in the title bar as before.&nbsp; To make up for this we need to have a toolbar that contains a Close button.&nbsp; Thus every Activity has an Activity toolbar that contains some standard controls and buttons.&nbsp; If you look at the code you'll see I'm hiding a couple of controls which we have no use for yet.
</p>
<p>The <em>read_file()</em> method is no longer called from the main() method and doesn't seem to be called from anywhere in the program.&nbsp; Of course it does get called, by some of the Activity code we inherited from our new parent class.&nbsp; Similarly the <em>__init__() </em>and <em>write_file() </em>methods (if we had a <em>write_file()</em> method) get called by the parent Activity class.
</p>
<p>If you're especially observant you might have noticed another change.&nbsp; Our original standalone program created a temporary file when it needed to extract something from a Zip file.&nbsp; It put that file in a directory called /tmp.&nbsp; Our new Activity still creates the file but puts it in a different directory, one specific to the Activity.
  <br />
</p>
<p>Making these changes to the code is not enough to make our program an Activity.&nbsp; We have to do some packaging work and get it set up to run from the Sugar emulator.&nbsp; We also need to learn how to run the Sugar emulator.&nbsp; That comes next!
  <br />
</p>
<p />
			</p></div>
			</div>
<div class="arrow" style="position:relative;left:10px;width:50px;float:left;bottom:5px;"><a href="#" onClick="previous();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/lefttext.png" height=20></a></div>
<div class="arrow" style="position:relative;left:528px;width:50px;float:left;bottom:5px;"><a href="#" onClick="next();"><img src="/floss/publish/ActivitiesGuideSugar/rsrc/TWiki/FlossSkin2/righttext.png" height=20></a></div>
			<br>
			<br>
			<br>
			<br>
			</td>
			</tr>
		</table>
		</div>
<!-- Piwik -->
<a href="http://piwik.org" title="Web analytics" onclick="window.open(this.href);return(false);">
<script language="javascript" src="http://adam.engagetv.com/piwik/piwik.js" type="text/javascript"></script>
<script type="text/javascript">
<!--
piwik_action_name = '';
piwik_idsite = 1;
piwik_url = 'http://adam.engagetv.com/piwik/piwik.php';
piwik_log(piwik_action_name, piwik_idsite, piwik_url);
//-->
</script>
<!-- /Piwik --> 
<script language="Javascript">
document.getElementById("InheritFromActivity").style.backgroundColor="#F99B1C";
</script>
</body>
</html>